<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux版qv2ray安装</title>
    <url>/2020/08/27/linux%E7%89%88qv2ray%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在国内有的网络技术文档都已经很老了，在外国能查看到新的互联网技术进行学习<br>废话不多说</p>
<ol>
<li>下载V2ray客户端<br> 应为github下载的比较慢，我下载好的放到了蓝奏云里面，蓝奏云下载的快<br> <a href="https://wwa.lanzous.com/iIatmf0cmqf">https://wwa.lanzous.com/iIatmf0cmqf</a><br> 更多其他系统版本<br> <a href="https://github.com/Qv2ray/Qv2ray/releases/tag/v1.99.6">https://github.com/Qv2ray/Qv2ray/releases/tag/v1.99.6</a></li>
<li>下载核心<br> 应为github下载的比较慢，我下载好的放到了蓝奏云里面，蓝奏云下载的快<br> <a href="https://wwa.lanzous.com/ixPOUf0cpyb">https://wwa.lanzous.com/ixPOUf0cpyb</a><br> 更多其他系统版本<br> <a href="https://github.com/v2fly/v2ray-core/releases">https://github.com/v2fly/v2ray-core/releases/</a></li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>我创建了一个v2ray文件夹里面是解压好的下载的核心和V2ray客户端<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200726184523611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol>
<li><p>然后在终端输入运行<br> 给他执行权限</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x .&#x2F;Qv2ray.v2.6.2.linux-x64.AppImage	 </span><br></pre></td></tr></table></figure>
<p> 运行</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;Qv2ray.v2.6.2.linux-x64.AppImage	 </span><br></pre></td></tr></table></figure></code></pre>
<ol start="2">
<li>设置<br> 设置中文<br> 他默认是英文的<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200726192820628.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ol>
<p><strong>添加核心</strong><br>上面下载的核心文件里面的执行文件<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200726194038573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>添加上面解压出来了的核心文件的根目录<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020072619422713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>代理</category>
      </categories>
      <tags>
        <tag>客户端代理</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派，反向ssh，内网通过公网访问到其他内网</title>
    <url>/2020/08/27/%E6%A0%91%E8%8E%93%E6%B4%BE%EF%BC%8C%E5%8F%8D%E5%90%91ssh%EF%BC%8C%E5%86%85%E7%BD%91%E9%80%9A%E8%BF%87%E5%85%AC%E7%BD%91%E8%AE%BF%E9%97%AE%E5%88%B0%E5%85%B6%E4%BB%96%E5%86%85%E7%BD%91/</url>
    <content><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h2 id="简单说"><a href="#简单说" class="headerlink" title="简单说"></a>简单说</h2><p>a内网，b公网，c内网<br>在c内网怎么访问到a的内网里面，就和访问c内网其他主机一样？<br> 我研究了好长时间问过学习过10多年的大佬，还有其他厉害的大佬，其他人给的建议，和书籍还有百度，下面我就进行一下内网穿透，反向隧道，<br> 应为我的笔记本内网穿透没有什么太大的用处 ，可以用花生壳内网穿透很简单。就不多说了<br> 都是树莓派就不行了，如果进行，没有远程ssh就不行了，不能进行渗透测试，<br> 开始操作<br>在《树莓派渗透实战》书说的如果从外网访问内网，是访问不了的，反向ssh隧道从内网就可以做到<br>内网执行的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -fN -R 5555:localhost:22  root@公网ip</span><br></pre></td></tr></table></figure>

<p>服务器执行的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@localhost -p5555</span><br></pre></td></tr></table></figure>

<h2 id="树莓派安装的是kali-linux系统-安装花生壳树莓派，"><a href="#树莓派安装的是kali-linux系统-安装花生壳树莓派，" class="headerlink" title="树莓派安装的是kali linux系统 安装花生壳树莓派，"></a>树莓派安装的是kali linux系统 安装花生壳树莓派，</h2><p>花生壳地址<a href="https://hsk.oray.com/download/">https://hsk.oray.com/download/</a><br>应为树莓派我安装的arm64位的，他只有32位的，安装不上<br>下面命令对32位的支持</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg --add-architecture armhf</span><br></pre></td></tr></table></figure>
<p>反正还是安装不是，不知道怎么回事<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200604210928493.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="树莓派用Sunny-Ngrok内网穿透"><a href="#树莓派用Sunny-Ngrok内网穿透" class="headerlink" title="树莓派用Sunny-Ngrok内网穿透"></a>树莓派用Sunny-Ngrok内网穿透</h2><p>官方<a href="http://www.ngrok.cc/">http://www.ngrok.cc/</a><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060421113237.png" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;sunny clientid  隧道id</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200604211248679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>自启动<a href="http://www.ngrok.cc/">http://www.ngrok.cc/</a>官方说明</p>
<h2 id="1、下载客户端"><a href="#1、下载客户端" class="headerlink" title="1、下载客户端"></a>1、下载客户端</h2><p>这一步就都不用说了大家都知道怎么操作。下载完成之后将客户端执行文件移动到 /use/local/bin 目录下并给予可执行权限。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv sunny &#x2F;usr&#x2F;local&#x2F;bin&#x2F;sunny</span><br><span class="line">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;sunny</span><br></pre></td></tr></table></figure>
<h2 id="2、编写启动脚本"><a href="#2、编写启动脚本" class="headerlink" title="2、编写启动脚本"></a>2、编写启动脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;init.d&#x2F;sunny 启动脚本代码</span><br></pre></td></tr></table></figure>
<p>把代码里面的【隧道id】替换成自己的隧道id</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh -e</span><br><span class="line">### BEGIN INIT INFO</span><br><span class="line"># Provides:          ngrok.cc</span><br><span class="line"># Required-Start:    $network $remote_fs $local_fs</span><br><span class="line"># Required-Stop:     $network $remote_fs $local_fs</span><br><span class="line"># Default-Start:     2 3 4 5</span><br><span class="line"># Default-Stop:      0 1 6</span><br><span class="line"># Short-Description: autostartup of frp for Linux</span><br><span class="line">### END INIT INFO</span><br><span class="line"></span><br><span class="line">NAME&#x3D;sunny</span><br><span class="line">DAEMON&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;$NAME</span><br><span class="line">PIDFILE&#x3D;&#x2F;var&#x2F;run&#x2F;$NAME.pid</span><br><span class="line"></span><br><span class="line">[ -x &quot;$DAEMON&quot; ] || exit 0</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  start)</span><br><span class="line">      if [ -f $PIDFILE ]; then</span><br><span class="line">        echo &quot;$NAME already running...&quot;</span><br><span class="line">        echo -e &quot;\033[1;35mStart Fail\033[0m&quot;</span><br><span class="line">      else</span><br><span class="line">        echo &quot;Starting $NAME...&quot;</span><br><span class="line">        start-stop-daemon -S -p $PIDFILE -m -b -o -q -x $DAEMON -- clientid 隧道id || return 2</span><br><span class="line">        echo -e &quot;\033[1;32mStart Success\033[0m&quot;</span><br><span class="line">    fi</span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">        echo &quot;Stoping $NAME...&quot;</span><br><span class="line">        start-stop-daemon -K -p $PIDFILE -s TERM -o -q || return 2</span><br><span class="line">        rm -rf $PIDFILE</span><br><span class="line">        echo -e &quot;\033[1;32mStop Success\033[0m&quot;</span><br><span class="line">    ;;</span><br><span class="line">  restart)</span><br><span class="line">    $0 stop &amp;&amp; sleep 2 &amp;&amp; $0 start</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    echo &quot;Usage: $0 &#123;start|stop|restart&#125;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3、测试可执行代码"><a href="#3、测试可执行代码" class="headerlink" title="3、测试可执行代码"></a>3、测试可执行代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod 755 &#x2F;etc&#x2F;init.d&#x2F;sunny</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;sunny start</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;sunny start    #启动</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;sunny stop     #停止</span><br><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;sunny restart  #重启</span><br></pre></td></tr></table></figure>
<h2 id="4、设置开机启动"><a href="#4、设置开机启动" class="headerlink" title="4、设置开机启动"></a>4、设置开机启动</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cd /etc/init.d</span><br><span class="line">sudo update-rc.d sunny defaults <span class="number">90</span>    <span class="comment">#加入开机启动</span></span><br><span class="line">sudo update-rc.d -f sunny remove  <span class="comment">#取消开机启动</span></span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060422195522.png" alt="在这里插入图片描述"></p>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>隧道</tag>
      </tags>
  </entry>
  <entry>
    <title>1. 网易web安全渗透  手动sql注入</title>
    <url>/2020/08/27/1.%20%E7%BD%91%E6%98%93web%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F%20%20%E6%89%8B%E5%8A%A8sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><ol>
<li><p>靶场环境搭建</p>
<p> 环境环境搭建服务器软件是phpstudy下载地址<a href="https://www.xp.cn/">https://www.xp.cn/</a><br> 靶场是sqli-labs下载地址是<a href="https://github.com/Audi-1/sqli-labs">https://github.com/Audi-1/sqli-labs</a><br> 配置sqli-labs的sql密码<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719151133673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p> 用php5和mysql5.7<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020071915101782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p> 成功<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719153932929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在1这里插入图片描述"></p>
</li>
</ol>
<ol start="2">
<li><p>注入的常用的函数</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select system_user();      系统用户名 </span><br><span class="line">select  user(); 　　当前数据库用户名</span><br><span class="line">select  current_user(); 　　当前用户名</span><br></pre></td></tr></table></figure>


</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select  database();  返回当前使用的数据库</span><br></pre></td></tr></table></figure>

![在这里插入图片描述](https://img-blog.csdnimg.cn/20200623084124884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select	version() mysql; 　　数据库版本</span><br><span class="line">select @@datadir;     数据库路径</span><br><span class="line">select @@basedir;  数据库安装路径</span><br><span class="line">select @@global.version_compile_os;  操作系统的信息</span><br></pre></td></tr></table></figure></code></pre>
<ol start="3">
<li>寻找注入点<br> 无特定目标 </li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inurl:php?id&#x3D;</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200623090208938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)
有特定目标
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inurl:php?id&#x3D;site:xxxx.com</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200623090405991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h2 id="检查注入点"><a href="#检查注入点" class="headerlink" title="检查注入点"></a>检查注入点</h2><ol>
<li><p>手工简单识别</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">and 1=1/ and 1=2</span><br><span class="line">and&quot;1=1/and&quot;1=2</span><br><span class="line">and 1 like 1/and 1 like 2</span><br></pre></td></tr></table></figure></li>
<li><p>工具识别</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -m   要指定的文件     多个目标URL保持到文件里-m就会用文件里的</span><br><span class="line">sqlmap --craw    sqlmap对目标网站进行爬取然后依次进行测试</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="mysql手动注入"><a href="#mysql手动注入" class="headerlink" title="mysql手动注入"></a>mysql手动注入</h2><ol>
<li>mysql结构<br> mysql内库<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719142556272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>核心原理:<br>MySq内置的 Information schema库,它功能强大,是我们进行MySq注入的基石!<br>通过 information schema我们可以窥透整个 MySQL的运行情况,也可以查看到数据库中所有的数据信息。</li>
</ol>
<ol start="3">
<li><p>查询数据库核心语法</p>
<table>
<thead>
<tr>
<th align="center">功能名称</th>
<th align="right">查询语句</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查库</td>
<td align="right">select schema_name from information_schema.schemata</td>
</tr>
<tr>
<td align="center">查表</td>
<td align="right">select table_name from information_schema.tables where table_schema=’库名’</td>
</tr>
<tr>
<td align="center">查列</td>
<td align="right">select column_name from information_schema.columns where table_name=’列名’;</td>
</tr>
<tr>
<td align="center">查数据</td>
<td align="right">select 列名 from 库名.表名</td>
</tr>
</tbody></table>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>   <strong>1.查库</strong><br>   <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719150848459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ol>
<p><strong>2.查表</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719154201445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>3.查列</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719154345793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以不输入单引号<br>比如<code>&#39;users&#39;</code>列名转换成哈希<code>7573657273</code><br>步骤<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719155359180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719155412516.png" alt="在这里插入图片描述"><br>然后在语句里面输入<code>0x和上面生成出来的哈希</code><br>意思<br>0x是告诉我是16进行的<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200719155656713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="4">
<li>提示</li>
</ol>
<pre><code> **提示1**:
 所有类型的sql注入，都是基于査库、表、列语句     

**提示2**:
sql注入，都是基于査库、表、列语句  
査询的场緊：可利用limit限定返回的数置及位置，依次査询</code></pre>
<p>回显数据的场聚：<em>concat</em>链接多个数据成为一条返回结果<br>咧<br>    1. limit函数<br>上面的这个limit，下面是他的演示，就是叫修改就可以查看其他的行<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020071917081938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    2. group_concat()函数<br>    他可以叫多个列组合到一个里面，应为sql注入，可能输出的有限制，<br>    找个函数就是，叫内容都输出的一个里面<br>    咧</p>
<pre><code>    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200719174303407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)



**提示3:**.
在一些场景，想要快速获取数据，需要接住工具，如：burp</code></pre>
<h2 id="靶场是sqli-labs进行手动sql注入1-4到这个地方：Sqli-labs-Less1-4关卡"><a href="#靶场是sqli-labs进行手动sql注入1-4到这个地方：Sqli-labs-Less1-4关卡" class="headerlink" title="靶场是sqli-labs进行手动sql注入1-4到这个地方：Sqli-labs Less1-4关卡"></a>靶场是sqli-labs进行手动sql注入1-4到这个地方：<a href="https://blog.csdn.net/qq_41860876/article/details/107405426">Sqli-labs Less1-4关卡</a></h2>]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>网易web安全渗透  手动sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>kali2020教程Burpsuite破解汉化版安装</title>
    <url>/2020/08/27/kali2020%E6%95%99%E7%A8%8BBurpsuite%E7%A0%B4%E8%A7%A3%E6%B1%89%E5%8C%96%E7%89%88%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>BurpSuite<br>废话不多说正题</p>
<ol>
<li><p>下载<br>下面是我提供的下载版本和工具<br>[Burp Suite2.0.1.1版]<a href="https://pan.baidu.com/s/1EyD0kYTE2K5EH46sYB6e3A">https://pan.baidu.com/s/1EyD0kYTE2K5EH46sYB6e3A</a>提取码：t3hp<br>[汉化包]<a href="https://pan.baidu.com/s/1wAHXJwADA7cw3pf_zIKDJQ">https://pan.baidu.com/s/1wAHXJwADA7cw3pf_zIKDJQ</a>提取码：b8u0<br>[java ]<a href="https://pan.baidu.com/s/1Yo2PlNTAcr-s678cpkiFHw">https://pan.baidu.com/s/1Yo2PlNTAcr-s678cpkiFHw</a>提取码：6346</p>
<ol start="2">
<li>进行配置<br>叫下载好的保存到一个目录里<br>然后解压出来叫下载好的jdk-8u161-linux-x64.tar.gz<br>命令</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">tar -xzvf jdk<span class="number">-8u</span>161-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104131200946.PNG" alt="在这里插入图片描述"><br>解压好进行配置运行下面的代码<br>1</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> JAVA_HOME=/root/桌面/jdk1<span class="number">.8</span>/</span><br></pre></td></tr></table></figure>
<p>2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> JRE_HOME=JAVAHOME/jreexportCLASSPATH=.:&#123;JAVA_HOME&#125;/lib:JREHOME/libexportPATH=&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>3</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/java java /root/桌面/jdk1<span class="number">.8</span>/bin/java <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>4</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/javac javac /root/桌面/jdk1<span class="number">.8</span>/bin/javac <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>5</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --<span class="built_in">set</span> java /root/桌面/jdk1<span class="number">.8</span>/bin/java</span><br></pre></td></tr></table></figure>
<p>6</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --<span class="built_in">set</span> java /root/桌面/jdk1<span class="number">.8</span>/bin/java</span><br></pre></td></tr></table></figure>
<p> 7</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">update-alternatives --<span class="built_in">set</span> javac /root/桌面/jdk1<span class="number">.8</span>/bin/javac</span><br></pre></td></tr></table></figure>
<p>然后运行</p>
</li>
</ol>
<pre><code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
查看配置成功</code></pre>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104132555181.png" alt="在这里插入图片描述"><br>3. 开始破解<br>1.先创建一个a.sh文件<br>文件里面a.sh内容</p>
<pre><code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">java -jar burp-loader-keygen.ja</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20191104140446983.png)
加执行权限


<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">chmod +x a.sh</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20191104140551606.png)
然后运行
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">./a,sh</span><br></pre></td></tr></table></figure>
运行后会出现![在这里插入图片描述](https://img-blog.csdnimg.cn/20191104140607834.png)</code></pre>
<p>2.创建一个burp.sh文件<br>文件里面a.sh内容</p>
<pre><code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">java -Dfile.encoding=utf<span class="number">-8</span> -javaagent:BurpSuiteCn.jar -Xbootclasspath/p:burp-loader-keygen.jar  -Xmx1024m -jar  burpsuite_pro_v2<span class="number">.0</span><span class="number">.11b</span>eta.jar</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20191104140820842.png)</code></pre>
<p>加执行权限</p>
<pre><code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">chmod +x burp.sh</span><br></pre></td></tr></table></figure>
运行


<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">./burp.sh</span><br></pre></td></tr></table></figure>
可以看到是中文的了
![在这里插入图片描述](https://img-blog.csdnimg.cn/20191104141137443.png)</code></pre>
<ol start="3">
<li>安装<br> 下面叫内容复制到里面<pre><code>                 ![在这里插入图片描述](https://img-blog.csdnimg.cn/20191104141229717.png)</code></pre>
<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104141306592.png" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2019110414131589.png" alt="在这里插入图片描述"><br>成功<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104141336122.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20191104141342661.png" alt="在这里插入图片描述"></li>
</ol>
<h1 id="作者QQ2737977997"><a href="#作者QQ2737977997" class="headerlink" title="作者QQ2737977997"></a>作者QQ2737977997</h1>]]></content>
      <categories>
        <category>Burpsuite破解</category>
      </categories>
      <tags>
        <tag>Burpsuite破解</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装kali linux和说明</title>
    <url>/2020/08/27/1.%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85kali%20linux%E5%92%8C%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p><strong>我玩树莓派的经历，自学习网络安全也有好几年了</strong></p>
<p><strong>应为我也是才上职高二年级的一个普通的学生，买树莓派也是考虑了很长时间，毕竟是学生党几百块已经算很贵的了，考虑了很长时间就决定买了一个树莓派</strong>，<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409143416347.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我买的是</p>
<ul>
<li>树莓派4b 4g</li>
<li>32g内存卡和读卡器</li>
<li>电源</li>
<li>壳子</li>
<li>摄像头</li>
</ul>
<h2 id="开始安装kali-linux"><a href="#开始安装kali-linux" class="headerlink" title="开始安装kali linux"></a>开始安装kali linux</h2><p>玩过kali的人，其实在树莓派安装kali很简单的<br>官方下载地址：<a href="https://www.offensive-security.com/kali-linux-arm-images/">https://www.offensive-security.com/kali-linux-arm-images/</a><br><strong>我下载的是这个</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409142019890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载完成要解压出来，<br>也可以校验一下是否下载时缺少什么吗<br><strong>记得要叫下载好的文件解压出来</strong><br>用win32diskimager工具可以在百度上下载到<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416125004522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="插入树莓派启动即可"><a href="#插入树莓派启动即可" class="headerlink" title="插入树莓派启动即可"></a>插入树莓派启动即可</h2><p>如果没有屏幕，可以插入网线，</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416130407849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用Xshell 6工具去连接ssh<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416130455310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416130544575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击连接然后输入<strong>账号默认是root密码是toor</strong><br>看一下已经连接上去了<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416130645277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个我就用他默认的源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>
<p>运行命令进行更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get  update</span><br><span class="line">apt-get  upgrade</span><br></pre></td></tr></table></figure>
<p>安装远程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt  install xrdp</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start xrdp</span><br></pre></td></tr></table></figure>
<p>设置开机自启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable  xrdp</span><br></pre></td></tr></table></figure>

<p>连接<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416132549991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置中文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416132632601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>解决乱码问题</strong><br>乱码是应为缺少字体<br>安装字体</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install xfonts-intl-chinese</span><br><span class="line">apt-get install ttf-wqy-microhei</span><br></pre></td></tr></table></figure>




<h2 id="我QQ2737977997"><a href="#我QQ2737977997" class="headerlink" title="我QQ2737977997"></a>我QQ2737977997</h2>]]></content>
      <categories>
        <category>树莓派kali linux</category>
      </categories>
      <tags>
        <tag>树莓派kali linux</tag>
      </tags>
  </entry>
  <entry>
    <title>用树莓派做移动黑客</title>
    <url>/2020/08/27/2.%20%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我玩树莓派的经历"><a href="#我玩树莓派的经历" class="headerlink" title="我玩树莓派的经历"></a>我玩树莓派的经历</h2><p><strong>自学习网络安全也有好几年了</strong></p>
<p><strong>应为我也是才上职高二年级的一个普通的学生，买树莓派也是考虑了很长时间，毕竟是学生党几百块已经算很贵的了，考虑了很长时间就决定买了一个树莓派，</strong></p>
<p><strong>树莓派安装kali在下面的连接查看</strong><br><a href="https://blog.csdn.net/qq_41860876/article/details/105409811"><strong>1. 树莓派安装kali linux和说明</strong></a></p>
<h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><p>设备有一个树莓派4b4g，<br>支持监听和AP的网卡用来，进行AP发送和连接<br>U盘用来存数据<br>充电宝用来供电<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200409143416347.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416150348284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416173032688.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416173057535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="搭建恶意wifi"><a href="#搭建恶意wifi" class="headerlink" title="搭建恶意wifi"></a>搭建恶意wifi</h2><ol>
<li>可以通过恶意wifi从而获得wifi密码<ol>
<li>获取到密码后，可以进行内网渗透，进行破坏就容易的多了</li>
</ol>
</li>
<li>通过恶意wifi盗窃用户密码<ol>
<li>可以抓包获取用户和密码，通过dns欺骗访问指定自己的恶意网页实现键盘记录盗窃密码，等等等等 </li>
</ol>
</li>
<li>通过恶意wif往下载程序里面注入病毒木马</li>
<li>通过恶意wif可以获取个人隐私</li>
</ol>
<p><strong>还有很多就不多说了，</strong></p>
<p>搭建恶意wifi有很多方法<br>有很多种现成的工具，<br>也可以进行手动搭建<br>这个我就用现成的工具了，手动搭建这个文章可能写的很长很长<br>Wifiphisher工具<br><a href="https://github.com/wifiphisher/wifiphisher"><strong>github地址</strong></a></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416153656244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416165223437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>做了一个qq登录的页面</strong><br>应为时间浪费太长我就修改了一下里面的内容,内容有不好</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416160055172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>中间人攻击也有很多种<br>通过欺骗对方叫流量转发给我然后我在转发出去<br><strong>查看网络里的人</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416174024830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>启动路由转发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1 &gt;&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arpspoof   -t 目标ip  -r  网关地址</span><br></pre></td></tr></table></figure>
<p><strong>可以加上-i指定网卡</strong></p>
<p>进行arp欺骗<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416174659711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>urlsnarf -i wlan0抓取目标访问的网站<br>还有很多<br>成功获取到密码<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200416182046801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>树莓派kali linux</category>
      </categories>
      <tags>
        <tag>用树莓派做移动黑客</tag>
      </tags>
  </entry>
  <entry>
    <title>2. 网易web安全渗透  union联合查询注入</title>
    <url>/2020/08/27/2.%20%E7%BD%91%E6%98%93web%E5%AE%89%E5%85%A8%E6%B8%97%E9%80%8F%20%20union%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名诸神之眼NMAP-学习笔记"><a href="#书名诸神之眼NMAP-学习笔记" class="headerlink" title="书名诸神之眼NMAP 学习笔记"></a>书名诸神之眼NMAP 学习笔记</h2><h2 id="nmap-伪装技术"><a href="#nmap-伪装技术" class="headerlink" title="nmap 伪装技术"></a>nmap 伪装技术</h2><ol>
<li><p>数据包分段</p>
<p> 发送的数据包将原理的数据包分成几个部分，防火墙在对数据包进行检查时候会更加困难<br> 注意：一些老的主机会老的系统可能会死机蓝屏</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -f  [目标]</span><br></pre></td></tr></table></figure>
<p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200601151648209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>指定使用的MTU<br> 最大传输单位（MTU），最大的数据包大小<br> 一般来说，以太网的MTU的默认是1500bytes ,如果大于这个数就被分片<br> 用参数–mtu指定大小</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --mtu [指定的大小]  [目标]</span><br></pre></td></tr></table></figure>
列`nmap --mtu 16  192.168.1.1`
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601152500955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="3">
<li>诱饵主机隐藏扫描<br>就是我伪造多个主机，然后里面就我真实的我，目标就不好判断那个是真实的攻击端了<br>在初始ping扫描（ICMP，SYN，ACK）和-O都可以用这个方法<ol>
<li>指端伪造的ip</li>
</ol>
</li>
</ol>
<pre><code>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -D [伪造的ip],[伪造的ip],[伪造的ip]。。。  [目标]</span><br></pre></td></tr></table></figure>
2. 用nmap随机生成伪造源地址


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -D RND [伪造源地址数量]   [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="4">
<li><p>源端口欺骗<br> 如果本地端口有限制，就可以利用这个端口进行扫描<br> <code>-g</code>和<code>--source-port</code>这个两个参数其实是一样的</p>
<p> 格式</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -g [伪造的端口]  [目标]</span><br></pre></td></tr></table></figure>

<p>  例如</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -g 53 192.168.1.1</span><br></pre></td></tr></table></figure></code></pre>
<ol start="5">
<li>发送报文时加随机数据<br> nmap发送的数据包只有包头，内容是空的，<br> 可以使用这个参数<code>--data-length </code>进行修改随机内容<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --data-length [要添加的随机数据]  [目标]</span><br></pre></td></tr></table></figure>
例如


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --data-length 50  192.168.1.1</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601155312478.png)</code></pre>
<ol start="6">
<li>TTL设置<br>ttl值Windows 是128(65——128)<br>Linux 和 Unix = 64 (1-64) Unix = 255<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --ttl [tti的值] [目标]</span><br></pre></td></tr></table></figure>
例如


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --ttl 50 192.168.1.1</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601160142850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="7">
<li>MAC地址欺骗<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  --spoof-mac [欺骗的MAC地址] [目标]</span><br></pre></td></tr></table></figure>
如果欺骗的MAC地址是0  nmap会选择一个全部随机的MAC地址
如果欺骗的MAC地址是小于12的十六进制的数字，nmap会随机填充后面的6个字节
nmap会通过查询nmap-mac-prefixes查询厂商的名称(区分大小写)
例如


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  --spoof-mac 0 192.168.43.1</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601192954456.png)</code></pre>
<h2 id="TCP完连接（Connect）扫描的检查"><a href="#TCP完连接（Connect）扫描的检查" class="headerlink" title="TCP完连接（Connect）扫描的检查"></a>TCP完连接（Connect）扫描的检查</h2><p>Nmap向一个开放的端口发起了连接请求，并且完成了三次握手，之后结束了这次连接。这种扫描很容易被检测到，如果没有开放目标会返回一个RST，这样断开会产生大量的错误消息，而这些记录会被记录下来<br>例如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap  -sT [目标]</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060119390434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现上面的情况可能就说明是有人在扫描你<br>如果有入侵检测设备就会报警<br>查看最多发的请求<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200601194543776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="nmap扫描结果保存"><a href="#nmap扫描结果保存" class="headerlink" title="nmap扫描结果保存"></a>nmap扫描结果保存</h2><ol>
<li>txt文件保存参数<code>-oN</code><br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -oN [*.txt]  [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="2">
<li>XML格式保存参数<code>-oX</code><br>格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap [*,xml] [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="3">
<li>grep格式保存参数`-oG<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -oG [*.gerp]  [目标]</span><br></pre></td></tr></table></figure></code></pre>
<h2 id="NSE的基础部分"><a href="#NSE的基础部分" class="headerlink" title="NSE的基础部分"></a>NSE的基础部分</h2><ol>
<li>NES的脚本的运行，<br> 现在使用NSE脚本进行测试一台服务器添加选项<code>-sC</code><br> 例如</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -O scanme.Nmap.org</span><br></pre></td></tr></table></figure></code></pre>
<ol start="2">
<li><p>NMSE中的脚本的分类<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200602080306319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>NSE脚本的选择<br> 脚本的位置在<code>/usr/share/nmap/scripts</code>文件夹里面<br> 用使用脚本<code>--script [脚本的文件名或者是路径文件名]</code> 运行脚本他也支持表达式<br> 列<br> <strong>1.使用nmap来枚举出目标web服务器的支持的HTTP方法</strong></p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 80 --script http-methods  192.168.30.34 </span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602092801293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)
可以看见目标支持的服务有GET HEAD POST OPTIONS

**2.或者也可以使用种类的名字来调用一个分类中的全部脚本**
1. 使用一个safe类型的全部脚本进行扫描
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script safe 192.168.30.34  </span><br></pre></td></tr></table></figure>


    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602093309230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)
2. 使用多个脚本进行扫描safe类型和discovery类型的全部脚本进行扫描
例如


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script safe,discovery 192.168.30.34</span><br></pre></td></tr></table></figure>
**3.-sC参数**
-sC参数它是--scriptDefault的缩写。也就是使用default分类下的脚本对目标进行扫描。
4.有可以指定一个位置进行扫描
例如


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -p 80  --script &#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;http-methods.nse 192.168.30.34</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602094727692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)
和上面的`nmap -p 80 --script http-methods  192.168.30.34 `扫描是一样的</code></pre>
<p><strong>4.也可以使用表达式</strong><br>    使用表达式<strong>or，and和not</strong><br>    1. not例<br>        例如想使用除了exploit分类以外的所有脚本对目标进行检测，命令如下</p>
<pre><code>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sV --script &quot;not exploit&quot;  192.168.30.34 </span><br></pre></td></tr></table></figure>
2. or例
如果想使用除了intrusive、dos、exploit分类以外的所有脚本对目标进行检测，命令如下


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -sV  --script &quot;not (intrusive or dos or exploit)&quot;  192.168.30.34 </span><br></pre></td></tr></table></figure>
3. and例
如果只使用broadcast和discovery分类的脚本对目标进行检测，命令如下


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -sV --script &quot;broadcast and discovery&quot;  192.168.30.34 </span><br></pre></td></tr></table></figure>
4. 也可以使用*和表达式进行结合
    *是代表所有的意思
    例如希望对一个FTP服务器进行审计，但是不希望使用intrusive分类中的脚本，就可以使用如下命令


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script &quot;ftp-* and not(intrusive)&quot;  192.168.30.34 </span><br></pre></td></tr></table></figure></code></pre>
<h2 id="了解脚本的原理"><a href="#了解脚本的原理" class="headerlink" title="了解脚本的原理"></a>了解脚本的原理</h2><ol>
<li>如果不仅仅想利用Nmap脚本的强大实力，还想进一步了解脚本的原理，可以使用<code>--script-trace</code>参数**<br>例如</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -p 80  --script http-methods 192.168.30.34   --script-trace</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602102532955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)


**1.2也可以使用-d[1到9]输出更详细详细，数字大，输出就越详细
    例如**


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -p 80  --script http-methods 192.168.30.34   --script-trace -d3</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602103054894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="2">
<li>使用–packet-trace选项可以查看所有发送和收到的数据包**<br>例如</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -p 80  --script http-methods 192.168.30.34   --packet-trace</span><br></pre></td></tr></table></figure>

![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602103720510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h2 id="NSE常见脚本的应用"><a href="#NSE常见脚本的应用" class="headerlink" title="NSE常见脚本的应用"></a>NSE常见脚本的应用</h2><p>nmap只能进行简单系统检查和服务检查，而NSE实现了大量的高级功能，</p>
<ol>
<li>信息收集类脚本<br> 基于http-methods脚本的审计目的，web服务器支持的http的方法<br> <strong>1. GET：请求指定的页面信息，并返回实体主体</strong><br> <strong>2. HEAD：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头。</strong><br> <strong>3. POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。</strong><br> <strong>4. PUT：从客户端向服务器传送的数据取代指定文档的内容。</strong><br> <strong>5. DELETE：请求服务器删除指定的页面。</strong><br> <strong>6. OPTIONS：允许客户端查看服务器的性能。TRACE：回显服务器收到的请求，主要用于测试或诊断。</strong><br> 例如</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -p 80  --script http-methods 192.168.30.34 </span><br></pre></td></tr></table></figure></code></pre>
<ol start="2">
<li>高级主机发现类脚本<ol>
<li>脚本broadcast-ping.NSE<br> 这个<code>broadcast-ping</code>这个脚本是发现本地的活跃的主机，其实nmap也能实现，nmap是向每个ip发单播探针数据包来实现的<br> broadcast-ping.nse脚本不同的是他是向本地网络中所有的IP地址发送广播包。</li>
<li>脚本targets-sniffer<br><code>targets-sniffer</code>脚本发现本地网络中的所有主机<br>脚本targets-sniffer的审计方法十分特殊，它会对你所在的网络进行嗅探，发现网络中的所有主机。这个脚本需要特权模式，也可以使用-e来执行网络监听的网卡设备，这个不需要指定目标他会检查本地的ip，例如你所在的网络IP地址为192.168.0.0/24<br>例如</li>
</ol>
</li>
</ol>
<pre><code>    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap --script targets-sniffer  -e eth0</span><br></pre></td></tr></table></figure>
     ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602112405671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="3">
<li>密码审计类脚本<ol>
<li>脚本mysql-brute.NSE<br>在Nmap中有两个数据文件，一个文件中包含一些常见的用户名，另一个文件中包含有一些常见的密码<br>例如</li>
</ol>
</li>
</ol>
<pre><code>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 3306  --script mysql-brute  192.168.30.39 </span><br></pre></td></tr></table></figure>
    也可以加`--packet-trace`发送和收到的数据包
2. 脚本smtp-brute.NSE
这个脚本可以支持对SMTP密码的暴力穷解，它支持LOGIN、PLAIN、CRAM-MD5、DIGEST-MD5和NTLM四种登录方式。
默认情况下，smtp-brute.NSE使用`/usr/share/nmap/nselib/data/usernames.lst`文件中的各项作为用户名，`/usr/share/nmap/nselib/data/passwords.lst`文件中的各项作为密码。
例如


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p  25  --script   smtp-brute 192.168.30.39 </span><br></pre></td></tr></table></figure>
    如果想指定字典文件可以用下面的命令
    `--script-args `是用来指定参数的


    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Nmap -p <span class="number">25</span> --script smtp-brute --script-args userdb=用户字典, passdb=密码字典  <span class="number">192.168</span><span class="number">.30</span><span class="number">.39</span> </span><br></pre></td></tr></table></figure>
    **2.1用户模式
    这种模式先取一个用户名，然后使用所有的密码与其配对，所有组合都结束后，再开始下一个用户名**
    例如
    `--script-args `是用来指定参数的

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script smtp-brute --script-args brute.mode&#x3D;指定的用户名  192.168.30.39 </span><br></pre></td></tr></table></figure>
    **2.2密码模式
    这种模式先取一个密码，然后使用所有的用户名与其配对，当所有组合都结束后，再开始下一个密码**
    例如

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script smtp-brute --script-args brute.mode&#x3D;指定的密码  192.168.30.39 </span><br></pre></td></tr></table></figure>
    2.3文件格式取用户密码
    这种模式与前两种不同，creds中所有的用户名和密码都写在同一个文件中，格式类似于admin/123456这种形式，Nmap会读取其中的每一行，然后访问服务器进行匹配
    例如

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nmap --script smtp-brute --script-args brute.mode&#x3D;creds,brute.credfile&#x3D;文件名   192.168.30.39 </span><br></pre></td></tr></table></figure></code></pre>
<ol>
<li><p>漏洞扫描类脚本</p>
<ol>
<li><p>脚本http-slowloris.NSE<br> http-slowloris.NSE脚本查看目标是否存在预防slowloris的 DoS攻击<br> Slowloris是在2009年Web安全专家RSnake提出的一种攻击方法，其原理是以极低的速度向服务器发送HTTP请求。由于Web Server对于并发的连接数都有一定的上限，导致拒绝服务<br> 例如<br> <code> --max-parallelism</code>这些选项控制用于主机组的探测报文数量</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 80 --script http-slowloris  --max-parallelism 300 192.168.30.39 </span><br></pre></td></tr></table></figure>

<p> 这个方法是直接去打目标系统</p>
</li>
</ol>
<p> <strong>1.1http-slowloris.NSE脚本扩展http-slowloris.send_interval参数</strong></p>
<pre><code> `http-slowloris.send_interval`参数可以指定发送http header datas的间隔，默认值为100
 `--script-args `是用来指定参数的
 ` --max-parallelism`这些选项控制用于主机组的探测报文数量
 例如</code></pre>
</li>
</ol>
<pre><code>    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Nmap -p <span class="number">80</span> --script http-slowloris --script-args http-slowloris.send_interval=<span class="number">200</span> --max-parallelism <span class="number">300</span>   <span class="number">192.168</span><span class="number">.30</span><span class="number">.39</span> </span><br></pre></td></tr></table></figure>
    **1.2http-slowloris.NSE脚本扩展http-slowloris.timelimit参数**
    攻击时间，默认是30分钟
    `--script-args `是用来指定参数的

    15m就是15分钟
    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -p <span class="number">80</span> --script http-slowloris --script-args http-slowloris.timelimit=<span class="number">15</span>m  <span class="number">192.168</span><span class="number">.30</span><span class="number">.39</span> </span><br></pre></td></tr></table></figure>
    **1.3http-slowloris.NSE脚本扩展http-slowloris.runforever参数**
        这个参数是对目标系统进行一直DoS攻击
        `--script-args `是用来指定参数的

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nmap -p 80 --script http-slowloris --script-args http-slowloris.runforever 192.168.30.39 </span><br></pre></td></tr></table></figure>
    还有一个名为http-slowloris-check.NSE的脚本也是用来发送slowloris的，都是他只会发送2个请求
    例如
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 80 --script http-slowloris-check 192.168.30.39 </span><br></pre></td></tr></table></figure>
2. POODLE漏洞扫描ssl-poodle脚本
    POODLE漏洞（亦即CVE-2014-3566）最早是由谷歌团队发现的，可以攻击者可以盗取，已经使用了的SSL3.0数据进行解密
    需要攻击者完全控制网络的流量，比如ARP欺骗，钓鱼wifi等等
    名为ssl-poodle的脚本来检查POODLE漏洞
    `--version-all`相当于`--version-intensity  9`  扫描强度


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sV --version-all --script ssl-poodle -p 443 192.168.30.39 </span><br></pre></td></tr></table></figure></code></pre>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>sql注入</category>
      </categories>
      <tags>
        <tag>union联合查询注入</tag>
      </tags>
  </entry>
  <entry>
    <title>解决显卡问题，kali启动死循环&quot; 5.921.261] nouveau 0000:01:00.0:&quot;</title>
    <url>/2020/08/27/%E8%A7%A3%E5%86%B3%E6%98%BE%E5%8D%A1%E9%97%AE%E9%A2%98%EF%BC%8Ckali%E5%90%AF%E5%8A%A8%E6%AD%BB%E5%BE%AA%E7%8E%AF%205.921.261%5D%20nouveau%200000:01:00.0:/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我的笔记本是winodws10和kali双系统<br>启动kali出现死循环5.921.261] nouveau 0000:01:00.0: fifo: SCHED_ERROR 06 ，就算重新装kali也是这个问题 ，根本就进不去系统,研究了多个深夜，<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200511105630754.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70"></p>
<p>我花了很长时间琢磨摸索研究是什么问题，终于叫这个问题给解决了</p>
<h2 id="摸索过程"><a href="#摸索过程" class="headerlink" title="摸索过程"></a>摸索过程</h2><p>，win10独立显卡驱动安装不上就算是安装上了，也不能用，报43错误，官方最新驱动以前的老驱动，重做系统，win10还是这样，我估计是独立显卡坏了，</p>
<p>，启动kali无线<strong>5.921.261] nouveau 0000:01:00.0: fifo: SCHED_ERROR 06</strong> ，是显卡驱动nouveau  ，<br>然后我在百度上找了很多资料，<br>刚开始kali是好的，然后突然就出现了这个问题，有大神说可能所引导没有安装好，从新安装kali，也是没有解决这个问题，我想可能是我的镜像有问题，我计算了他的值和官方的值一样，说明镜像是没有问题的，找了很多方法，还是没有解决，已经到了深夜了，我最后看了一篇文字，<a href="https://blog.csdn.net/yaorengjin0808/article/details/81613331">https://blog.csdn.net/yaorengjin0808/article/details/81613331</a> 用了这个方法发现可以进入系统了，应为kali2020系统GRUB内核参数有变动，下面是我研究了好长时间，</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li><p>进入系统，叫你选系统的时候按e键，进入编辑模式，</p>
</li>
<li><p>在这里添加这串字符<code>nouveau.modeset=0;</code>，splash在前面也可以<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200511105947952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   俺F10值启动发现就可以进入系统了<br>   <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200511110429756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>添加GRUB添加内核参数<br>进入<code>sudo vim /etc/default/grub</code><br>添加这个<code>splash nouveau.modeset=0</code></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200511110632400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70"></p>
<p>命令<code>update-grub</code></p>
<h2 id="解决这个问题参考了很多网上的资料，"><a href="#解决这个问题参考了很多网上的资料，" class="headerlink" title="解决这个问题参考了很多网上的资料，"></a>解决这个问题参考了很多网上的资料，</h2><h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2></li>
</ol>
]]></content>
      <categories>
        <category>解决显卡问题</category>
      </categories>
      <tags>
        <tag>解决显卡问题</tag>
      </tags>
  </entry>
  <entry>
    <title>1 nmap扫描 扫描格式，活主机，端口扫描</title>
    <url>/2020/08/29/1%20nmap%E6%89%AB%E6%8F%8F%20%E6%89%AB%E6%8F%8F%E6%A0%BC%E5%BC%8F%EF%BC%8C%E6%B4%BB%E4%B8%BB%E6%9C%BA%EF%BC%8C%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>笔记</p>
<ol>
<li><p>nmap范围扫描<br> 格式法</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">192.168.0.1-255		&#x2F;&#x2F;指定范围</span><br><span class="line">192.168.0.1&#x2F;24     &#x2F;&#x2F;对整个子网进行扫描</span><br><span class="line">192.168.0.1，192.168.0.50，192.168.0.30	&#x2F;&#x2F;对多个主机进行扫描</span><br><span class="line">nmap [目标]  --exclude  [指定不扫描的主机] 	&#x2F;&#x2F;排除主机扫描</span><br><span class="line">-iL a.txt 	&#x2F;&#x2F;指定a.txt 文件内容进行扫描</span><br><span class="line">-iR  [数量]   &#x2F;&#x2F;要指定的随机ip扫面</span><br></pre></td></tr></table></figure>
<h2 id="探测存活主机"><a href="#探测存活主机" class="headerlink" title="探测存活主机"></a>探测存活主机</h2><p>nmap发送的那些数据包可以用<code>--packet-trace</code>来查看</p>
</li>
<li><p>ARP扫描探测存活主机<br> 交换机里面中每个接口都有寻址寄存器，里面存放这物理地址表<br> ARP扫描原理就是，向内网送ARP包如果主机给我相应了，就说明主机存活<br> 注意：这个ARP扫描很难防御，在内网扫描ARP扫描是最佳的扫描<br> 列</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -PR [目标]</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200529112421987.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="2">
<li>ICMP探测探测存活主机<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200529113412411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><ol>
<li>请求和响应应答探测存活主机<br> 发送ICMP响应请求，如果得到目标主机发回的ICMP响应，则说明该主机处于活跃状态，就和ping命令一样</li>
</ol>
</li>
</ol>
<pre><code>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -PE [目标地址]</span><br></pre></td></tr></table></figure>
    列
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200529115611152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)
2. 时间戳请求和响应探测存活主机
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap   -sn  -PP [目标]</span><br></pre></td></tr></table></figure>
3. 地址俺码请求和响应探测存活主机
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -sn   -PM  [端口，或多个端口] [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="3">
<li><p>TCP探测存活主机</p>
<ol>
<li>SYN探测存活主机<br>原理是客户端发送SYN目标会返回SYN ACK创建连接，如果端口没有开放就断开连接回RST数据包，如何有一个返回就说明目标存活<br>格式 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -sn  -PS [端口，或多个端口] [目标]</span><br></pre></td></tr></table></figure></li>
<li>ACK探测存活主机<br> 这个被防火墙过滤<br> 原理客户端发送一个ACK数据包给服务器，如果服务器存活就发送RST数据包，如果没有存活就没有都不响应<br> 格式 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -sn -PA [端口，或多个端口] [目标]</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>UDP探测存活主机</p>
<p> 当目标收到UDP数据包如果这个端口是关闭的，就返回ICMP端口不可达数据包，</p>
<pre><code> 这个扫描不太准
 格式</code></pre>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sn PU  [端口，或多个端口] [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="5">
<li><p>SCTP探测存活主机<br>SCTP用的比较少<br> 流控制传输协议（SCTP，Stream Control Transmission Protocol）是一种在网络连接两端之间同时传输多个数据流的协议。SCTP提供的服务于UDP和TCP类似<br> SCTP是可以确保数据传输的，和TCP类似，也是通过确认机制来实现的。和TCP不同的是：</p>
<p>  TCP是以字节为单位传输的，SCTP是以数据块为单位传输的</p>
<p> TCP接收端确认的是收到的字节数，SCTP接收端确认的是接收到的数据块。SCTP的这种数据块（被称为DATA CHUNK）通常会携带应用的一个数据包，或者说是应用要发送的一个消息。</p>
<p> 在实际的应用中，TCP发送方的可以将应用程序需要发送的多个消息打包到一个TCP包里面发出去。比如，应用程序连续调用两次send()向对端发送两条消息，TCP协议可能把这两条消息都打包放在同一个TCP包中。接收端在收到这个TCP包时，回给对端的ACK只是表明自己接收到了多少个字节，TCP协议本身并不会把收到的数据重新拆散分成两条应用层消息并通知应用程序去接收。事实上，应用程序可能只需要调用一次receive()，就会把两条消息都收上来，然后应用需要根据应用程序自己定义的格式去拆成两条消息。</p>
<p> 与TCP不同，SCTP是将应用程序的每次调用sendmsg()发送的数据当作一个整体，放到一个被称为DATA CHUNK的数据块里面，接收端也是以DATA CHUNK为单位接收数据，并重新组包，通知应用程序接收。通常，应用程序每次调用recvmesg()都会收到一条完整的消息。</p>
<p> 在SCTP的发送端，多条短的应用层消息可以被SCTP协议打包放在同一个SCTP包中，此时在SCTP包中可以看到多个DATA CHUNK。另一方面，一条太长（比如，超过了路径MTU）的应用层消息也可能被SCTP协议拆分成多个片段，分别放在多个DATA CHUNK并通过不同的SCTP包发送给对端。这两种情况下，SCTP的接收端都能重新组包，并通知应用程序去接收。<br> 格式</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sn  -PY [端口,多个端口]   [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="6">
<li><p>使用IP进行主机发现<br>ICMP为1<br>IGMP为2<br>TCP为6<br>UDP为7<br>GRE4为7<br>ESP为50</p>
<p> 格式</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -sn PO 号  [目标]</span><br></pre></td></tr></table></figure>
<p> 如果不指定号默认是1<br> 这个方法容易被被目标检查出来<br> 可以加上<code>--data-length</code>添加随机数据包</p>
</li>
<li><p>DNS活跃主机发现和DNS相关选项<br> 在对一台主机扫描的时候，如果它有域名的话，nmap会向域名服务器提出请求，显示ip对映的域名，扫描的时候可以指定范围</p>
<ol>
<li>无论是活跃的主机和不活跃的主机都叫域名给列出来 <code>-R</code><br>列</li>
</ol>
</li>
</ol>
<pre><code>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -R  192.168.1.1-20</span><br></pre></td></tr></table></figure>
这个扫描可能会消耗大量的时间</code></pre>
<h2 id="端口扫描技术"><a href="#端口扫描技术" class="headerlink" title="端口扫描技术"></a>端口扫描技术</h2><h3 id="1-nmap对端口的状态的定义"><a href="#1-nmap对端口的状态的定义" class="headerlink" title="1. nmap对端口的状态的定义"></a>1. nmap对端口的状态的定义</h3><ol>
<li>open：如果目标端口的状态为open，这表明在该端口有应用程序接收TCP连接或者UDP报文。</li>
<li>closed：如果目标端口的状态为closed，这里要注意closed并不意味着没有任何反应，状态为closed的端口是可访问的，这种端口可以接收Nmap探测报文并做出响应。相比较而言，没有应用程序在open上监听。</li>
<li>filtered：产生这种结果的原因主要是存在目标网络数据包过滤，由于这些设备过滤了探测数据包，导致Nmap无法确定该端口是否开放。这种设备可能是路由器、防火墙甚至专门的安全软件。</li>
<li>unfiltered：这种结果很少见，它表明目标端口是可以访问的，但是Nmap却无法判断它到底是open还是closed的。通常只有在进行ACK扫描时才会出现这种状态。</li>
<li>open | filtered：无法确定端口是开放的还是被过滤了，开放的端口不响应就是一个例子。</li>
<li>closed|filtered：无法确定端口是关闭的还是被过滤了。只有在使用idle扫描时才会发生这种情况。</li>
</ol>
<h3 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2. 端口扫描"></a>2. 端口扫描</h3><ol>
<li><p>SYN扫描<br> nmap默认就是SYN扫描，扫描速度快<br> nmap会像主机发送一个SYN数据包，目标会返回SYN加ACK进行应答。然后nmap会返回给服务器RST数据包断开连接，没有建立三次握手，目标主机是不记录的<br> <strong>响应状态</strong></p>
<p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200530165532233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 扫描语法</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sS [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="2">
<li>Connect扫描<br> 和SYN扫描方式一样，只是完成三次握手了<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sT [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="3">
<li>UDP扫描<br> <strong>响应状态</strong><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020053017092356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sU [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="4">
<li>TCP  FIN扫描<br> 发一个FIN数据包目标端口返回RST就说明端口是关闭的<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sF [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="5">
<li>NULL扫描<br> NULL扫描发送一个没有包含任何数据的数据包，目标端口返回RST就说明端口是关闭的<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sN [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="6">
<li>Xmas Tree 扫描<br> 是向目标端发送一个含有FIN,URG和PUSH标志的数据包，目标端口返回RST就说明端口是关闭的<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sX [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="7">
<li>idle扫描<br> <strong>僵尸机扫描端口开发</strong></li>
<li>攻击端给僵尸机发一个SYN/ACK僵尸机回RST/包里面有IPID=x</li>
<li>攻击端发服务器端口SYN是伪造僵尸机ip服务器发给僵尸                        机SYN/ACK，应为没有建立连接僵尸机就回RST/IPID=x+1</li>
<li>攻击端在给僵尸机发一个SYN/ACK僵尸机回RST/IPIF=x+2</li>
</ol>
<p><strong>僵尸机扫描端口开发</strong><br>1.攻击端给僵尸机发一个SYN/ACK僵尸机回RST/IPID=x<br>2.攻击端发服务器端口SYN是伪造僵尸机ip服务器发给僵尸机没有建立连接服务器回发僵尸机RST<br>3.攻击端在给僵尸机发一个SYN/ACK僵尸机回RST/IPIF=x+1</p>
<pre><code>**判断是否是僵尸机--script是使用脚本**

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p端口 要判断是僵尸机的ip  --script&#x3D;ipidseq.nse  </span><br></pre></td></tr></table></figure>

使用僵尸机扫描目标端口 -sI是僵尸扫描


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap 目标ip -sI 僵尸机ip -Pn -p 0-100  </span><br></pre></td></tr></table></figure></code></pre>
<ol start="8">
<li>指定扫描的端口<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200531163447804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 1.指定常见的100个端口<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -F [目标]</span><br></pre></td></tr></table></figure>
2.指定一个端口扫描
格式


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p [端口]  [目标]</span><br></pre></td></tr></table></figure>
3.使用名字指定扫描端口
格式
nmap -p U:53  [目标]</code></pre>
<p>   4.扫描所有的端口<br>    格式</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p *  [目标]</span><br></pre></td></tr></table></figure>
5.常用的端口扫描
格式 


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  --top-ports [目标]</span><br></pre></td></tr></table></figure></code></pre>
<h2 id="远程系统与服务探测"><a href="#远程系统与服务探测" class="headerlink" title="远程系统与服务探测"></a>远程系统与服务探测</h2><ol>
<li><p>主机探测<br> 查看返回的ttl值查看主机的系统<br>ttl值Windows 是128(65——128)<br>Linux 和 Unix = 64 (1-64) Unix = 255</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -O [目标]</span><br></pre></td></tr></table></figure></li>
<li><p>版本探测<br> 发送探针报文，得到返回确认值，得到服务的版本</p>
<ol>
<li>探测服务器版本参数-sV <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -sV [目标]</span><br></pre></td></tr></table></figure>
 1.如果想对全端口扫描可以加上<code>--allport</code><br> 2.设置版本扫描的强度加上<code>--version-intensity   [1到9]</code><br> 3.如果轻量级模式扫描可以加上<code>--version-light</code><br> 4.尝试每个探测相当于<code>--version-intensity  9</code>  加上<code>--version-all</code><br> 6.<code>--version-trace</code>这个参数将会打印出关于正在进行的扫描的详细调试信息<br> 7.<strong>-sR(RPC扫描)</strong><br> 这个方法和许多端口扫描方法联合使用。它对所有的被发现的开发的TCP/UDP端口执行SunRPC程序NULL命令试图确定他们是否RPC端口，如果是，可以确定是什么程序和版本号<br> nmap -sP [目标]</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/08/29/2.%20nmap%E4%BC%AA%E8%A3%85%E6%8A%80%E6%9C%AF%E5%92%8C%E6%A3%80%E6%9F%A5%EF%BC%8CNSE%E7%9A%84%E5%9F%BA%E7%A1%80%EF%BC%8C%E5%8E%9F%E7%90%86%E5%92%8C%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名诸神之眼NMAP-学习笔记"><a href="#书名诸神之眼NMAP-学习笔记" class="headerlink" title="书名诸神之眼NMAP 学习笔记"></a>书名诸神之眼NMAP 学习笔记</h2><h2 id="nmap-伪装技术"><a href="#nmap-伪装技术" class="headerlink" title="nmap 伪装技术"></a>nmap 伪装技术</h2><ol>
<li><p>数据包分段</p>
<p> 发送的数据包将原理的数据包分成几个部分，防火墙在对数据包进行检查时候会更加困难<br> 注意：一些老的主机会老的系统可能会死机蓝屏</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -f  [目标]</span><br></pre></td></tr></table></figure>
<p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200601151648209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>指定使用的MTU<br> 最大传输单位（MTU），最大的数据包大小<br> 一般来说，以太网的MTU的默认是1500bytes ,如果大于这个数就被分片<br> 用参数<code>--mtu</code>指定大小</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --mtu [指定的大小]  [目标]</span><br></pre></td></tr></table></figure>
列`nmap --mtu 16  192.168.1.1`
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601152500955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="3">
<li>诱饵主机隐藏扫描<br>就是我伪造多个主机，然后里面就我真实的我，目标就不好判断那个是真实的攻击端了<br>在初始ping扫描（ICMP，SYN，ACK）和-O都可以用这个方法<ol>
<li>指端伪造的ip</li>
</ol>
</li>
</ol>
<pre><code>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -D [伪造的ip],[伪造的ip],[伪造的ip]。。。  [目标]</span><br></pre></td></tr></table></figure>
2. 用nmap随机生成伪造源地址


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -D RND [伪造源地址数量]   [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="4">
<li><p>源端口欺骗<br> 如果本地端口有限制，就可以利用这个端口进行扫描<br> <code>-g</code>和<code>--source-port</code>这个两个参数其实是一样的</p>
<p> 格式</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -g [伪造的端口]  [目标]</span><br></pre></td></tr></table></figure>

<p>  例如</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -g 53 192.168.1.1</span><br></pre></td></tr></table></figure></code></pre>
<ol start="5">
<li>发送报文时加随机数据<br> nmap发送的数据包只有包头，内容是空的，<br> 可以使用这个参数<code>--data-length </code>进行修改随机内容<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --data-length [要添加的随机数据]  [目标]</span><br></pre></td></tr></table></figure>
例如


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --data-length 50  192.168.1.1</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601155312478.png)</code></pre>
<ol start="6">
<li>TTL设置<br>ttl值Windows 是128(65——128)<br>Linux 和 Unix = 64 (1-64) Unix = 255<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --ttl [tti的值] [目标]</span><br></pre></td></tr></table></figure>
例如


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --ttl 50 192.168.1.1</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601160142850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="7">
<li>MAC地址欺骗<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  --spoof-mac [欺骗的MAC地址] [目标]</span><br></pre></td></tr></table></figure>
如果欺骗的MAC地址是0  nmap会选择一个全部随机的MAC地址
如果欺骗的MAC地址是小于12的十六进制的数字，nmap会随机填充后面的6个字节
nmap会通过查询nmap-mac-prefixes查询厂商的名称(区分大小写)
例如


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  --spoof-mac 0 192.168.43.1</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601192954456.png)</code></pre>
<h2 id="TCP完连接（Connect）扫描的检查"><a href="#TCP完连接（Connect）扫描的检查" class="headerlink" title="TCP完连接（Connect）扫描的检查"></a>TCP完连接（Connect）扫描的检查</h2><p>Nmap向一个开放的端口发起了连接请求，并且完成了三次握手，之后结束了这次连接。这种扫描很容易被检测到，如果没有开放目标会返回一个RST，这样断开会产生大量的错误消息，而这些记录会被记录下来<br>例如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap  -sT [目标]</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060119390434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>出现上面的情况可能就说明是有人在扫描你<br>如果有入侵检测设备就会报警<br>查看最多发的请求<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200601194543776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="nmap扫描结果保存"><a href="#nmap扫描结果保存" class="headerlink" title="nmap扫描结果保存"></a>nmap扫描结果保存</h2><ol>
<li>txt文件保存参数<code>-oN</code><br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -oN [*.txt]  [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="2">
<li>XML格式保存参数<code>-oX</code><br>格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap [*,xml] [目标]</span><br></pre></td></tr></table></figure></code></pre>
<ol start="3">
<li>grep格式保存参数`-oG<br> 格式</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -oG [*.gerp]  [目标]</span><br></pre></td></tr></table></figure></code></pre>
<h2 id="NSE的基础部分"><a href="#NSE的基础部分" class="headerlink" title="NSE的基础部分"></a>NSE的基础部分</h2><ol>
<li>NES的脚本的运行，<br> 现在使用NSE脚本进行测试一台服务器添加选项<code>-sC</code><br> 例如</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -O scanme.Nmap.org</span><br></pre></td></tr></table></figure></code></pre>
<ol start="2">
<li><p>NMSE中的脚本的分类<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200602080306319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>NSE脚本的选择<br> 脚本的位置在<code>/usr/share/nmap/scripts</code>文件夹里面<br> 用使用脚本<code>--script [脚本的文件名或者是路径文件名]</code> 运行脚本他也支持表达式<br> 列<br> <strong>1.使用nmap来枚举出目标web服务器的支持的HTTP方法</strong></p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 80 --script http-methods  192.168.30.34 </span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602092801293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)
可以看见目标支持的服务有GET HEAD POST OPTIONS

**2.或者也可以使用种类的名字来调用一个分类中的全部脚本**
1. 使用一个safe类型的全部脚本进行扫描
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script safe 192.168.30.34  </span><br></pre></td></tr></table></figure>


    ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602093309230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)
2. 使用多个脚本进行扫描safe类型和discovery类型的全部脚本进行扫描
例如


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script safe,discovery 192.168.30.34</span><br></pre></td></tr></table></figure>
**3.-sC参数**
-sC参数它是--scriptDefault的缩写。也就是使用default分类下的脚本对目标进行扫描。
4.有可以指定一个位置进行扫描
例如


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -p 80  --script &#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;http-methods.nse 192.168.30.34</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602094727692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)
和上面的`nmap -p 80 --script http-methods  192.168.30.34 `扫描是一样的</code></pre>
<p><strong>4.也可以使用表达式</strong><br>    使用表达式<strong>or，and和not</strong><br>    1. not例<br>        例如想使用除了exploit分类以外的所有脚本对目标进行检测，命令如下</p>
<pre><code>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sV --script &quot;not exploit&quot;  192.168.30.34 </span><br></pre></td></tr></table></figure>
2. or例
如果想使用除了intrusive、dos、exploit分类以外的所有脚本对目标进行检测，命令如下


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -sV  --script &quot;not (intrusive or dos or exploit)&quot;  192.168.30.34 </span><br></pre></td></tr></table></figure>
3. and例
如果只使用broadcast和discovery分类的脚本对目标进行检测，命令如下


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -sV --script &quot;broadcast and discovery&quot;  192.168.30.34 </span><br></pre></td></tr></table></figure>
4. 也可以使用*和表达式进行结合
    *是代表所有的意思
    例如希望对一个FTP服务器进行审计，但是不希望使用intrusive分类中的脚本，就可以使用如下命令


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script &quot;ftp-* and not(intrusive)&quot;  192.168.30.34 </span><br></pre></td></tr></table></figure></code></pre>
<h2 id="了解脚本的原理"><a href="#了解脚本的原理" class="headerlink" title="了解脚本的原理"></a>了解脚本的原理</h2><ol>
<li>如果不仅仅想利用Nmap脚本的强大实力，还想进一步了解脚本的原理，可以使用<code>--script-trace</code>参数**<br>例如</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -p 80  --script http-methods 192.168.30.34   --script-trace</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602102532955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)


**1.2也可以使用-d[1到9]输出更详细详细，数字大，输出就越详细
    例如**


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -p 80  --script http-methods 192.168.30.34   --script-trace -d3</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602103054894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="2">
<li>使用–packet-trace选项可以查看所有发送和收到的数据包**<br>例如</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -p 80  --script http-methods 192.168.30.34   --packet-trace</span><br></pre></td></tr></table></figure>

![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602103720510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h2 id="NSE常见脚本的应用"><a href="#NSE常见脚本的应用" class="headerlink" title="NSE常见脚本的应用"></a>NSE常见脚本的应用</h2><p>nmap只能进行简单系统检查和服务检查，而NSE实现了大量的高级功能，</p>
<ol>
<li>信息收集类脚本<br> 基于http-methods脚本的审计目的，web服务器支持的http的方法<br> <strong>1. GET：请求指定的页面信息，并返回实体主体</strong><br> <strong>2. HEAD：类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头。</strong><br> <strong>3. POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。</strong><br> <strong>4. PUT：从客户端向服务器传送的数据取代指定文档的内容。</strong><br> <strong>5. DELETE：请求服务器删除指定的页面。</strong><br> <strong>6. OPTIONS：允许客户端查看服务器的性能。TRACE：回显服务器收到的请求，主要用于测试或诊断。</strong><br> 例如</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  -p 80  --script http-methods 192.168.30.34 </span><br></pre></td></tr></table></figure></code></pre>
<ol start="2">
<li>高级主机发现类脚本<ol>
<li>脚本broadcast-ping.NSE<br> 这个<code>broadcast-ping</code>这个脚本是发现本地的活跃的主机，其实nmap也能实现，nmap是向每个ip发单播探针数据包来实现的<br> broadcast-ping.nse脚本不同的是他是向本地网络中所有的IP地址发送广播包。</li>
<li>脚本targets-sniffer<br><code>targets-sniffer</code>脚本发现本地网络中的所有主机<br>脚本targets-sniffer的审计方法十分特殊，它会对你所在的网络进行嗅探，发现网络中的所有主机。这个脚本需要特权模式，也可以使用-e来执行网络监听的网卡设备，这个不需要指定目标他会检查本地的ip，例如你所在的网络IP地址为192.168.0.0/24<br>例如</li>
</ol>
</li>
</ol>
<pre><code>    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap --script targets-sniffer  -e eth0</span><br></pre></td></tr></table></figure>
     ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200602112405671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="3">
<li>密码审计类脚本<ol>
<li>脚本mysql-brute.NSE<br>在Nmap中有两个数据文件，一个文件中包含一些常见的用户名，另一个文件中包含有一些常见的密码<br>例如</li>
</ol>
</li>
</ol>
<pre><code>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 3306  --script mysql-brute  192.168.30.39 </span><br></pre></td></tr></table></figure>
    也可以加`--packet-trace`发送和收到的数据包
2. 脚本smtp-brute.NSE
这个脚本可以支持对SMTP密码的暴力穷解，它支持LOGIN、PLAIN、CRAM-MD5、DIGEST-MD5和NTLM四种登录方式。
默认情况下，smtp-brute.NSE使用`/usr/share/nmap/nselib/data/usernames.lst`文件中的各项作为用户名，`/usr/share/nmap/nselib/data/passwords.lst`文件中的各项作为密码。
例如


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p  25  --script   smtp-brute 192.168.30.39 </span><br></pre></td></tr></table></figure>
    如果想指定字典文件可以用下面的命令
    `--script-args `是用来指定参数的


    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Nmap -p <span class="number">25</span> --script smtp-brute --script-args userdb=用户字典, passdb=密码字典  <span class="number">192.168</span><span class="number">.30</span><span class="number">.39</span> </span><br></pre></td></tr></table></figure>
    **2.1用户模式
    这种模式先取一个用户名，然后使用所有的密码与其配对，所有组合都结束后，再开始下一个用户名**
    例如
    `--script-args `是用来指定参数的

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script smtp-brute --script-args brute.mode&#x3D;指定的用户名  192.168.30.39 </span><br></pre></td></tr></table></figure>
    **2.2密码模式
    这种模式先取一个密码，然后使用所有的用户名与其配对，当所有组合都结束后，再开始下一个密码**
    例如

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script smtp-brute --script-args brute.mode&#x3D;指定的密码  192.168.30.39 </span><br></pre></td></tr></table></figure>
    2.3文件格式取用户密码
    这种模式与前两种不同，creds中所有的用户名和密码都写在同一个文件中，格式类似于admin/123456这种形式，Nmap会读取其中的每一行，然后访问服务器进行匹配
    例如

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nmap --script smtp-brute --script-args brute.mode&#x3D;creds,brute.credfile&#x3D;文件名   192.168.30.39 </span><br></pre></td></tr></table></figure></code></pre>
<ol>
<li><p>漏洞扫描类脚本</p>
<ol>
<li><p>脚本http-slowloris.NSE<br> http-slowloris.NSE脚本查看目标是否存在预防slowloris的 DoS攻击<br> Slowloris是在2009年Web安全专家RSnake提出的一种攻击方法，其原理是以极低的速度向服务器发送HTTP请求。由于Web Server对于并发的连接数都有一定的上限，导致拒绝服务<br> 例如<br> <code> --max-parallelism</code>这些选项控制用于主机组的探测报文数量</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 80 --script http-slowloris  --max-parallelism 300 192.168.30.39 </span><br></pre></td></tr></table></figure>

<p> 这个方法是直接去打目标系统</p>
</li>
</ol>
<p> <strong>1.1http-slowloris.NSE脚本扩展http-slowloris.send_interval参数</strong></p>
<pre><code> `http-slowloris.send_interval`参数可以指定发送http header datas的间隔，默认值为100
 `--script-args `是用来指定参数的
 ` --max-parallelism`这些选项控制用于主机组的探测报文数量
 例如</code></pre>
</li>
</ol>
<pre><code>    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Nmap -p <span class="number">80</span> --script http-slowloris --script-args http-slowloris.send_interval=<span class="number">200</span> --max-parallelism <span class="number">300</span>   <span class="number">192.168</span><span class="number">.30</span><span class="number">.39</span> </span><br></pre></td></tr></table></figure>
    **1.2http-slowloris.NSE脚本扩展http-slowloris.timelimit参数**
    攻击时间，默认是30分钟
    `--script-args `是用来指定参数的

    15m就是15分钟
    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nmap -p <span class="number">80</span> --script http-slowloris --script-args http-slowloris.timelimit=<span class="number">15</span>m  <span class="number">192.168</span><span class="number">.30</span><span class="number">.39</span> </span><br></pre></td></tr></table></figure>
    **1.3http-slowloris.NSE脚本扩展http-slowloris.runforever参数**
        这个参数是对目标系统进行一直DoS攻击
        `--script-args `是用来指定参数的

    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nmap -p 80 --script http-slowloris --script-args http-slowloris.runforever 192.168.30.39 </span><br></pre></td></tr></table></figure>
    还有一个名为http-slowloris-check.NSE的脚本也是用来发送slowloris的，都是他只会发送2个请求
    例如
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 80 --script http-slowloris-check 192.168.30.39 </span><br></pre></td></tr></table></figure>
2. POODLE漏洞扫描ssl-poodle脚本
    POODLE漏洞（亦即CVE-2014-3566）最早是由谷歌团队发现的，可以攻击者可以盗取，已经使用了的SSL3.0数据进行解密
    需要攻击者完全控制网络的流量，比如ARP欺骗，钓鱼wifi等等
    名为ssl-poodle的脚本来检查POODLE漏洞
    `--version-all`相当于`--version-intensity  9`  扫描强度


    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -sV --version-all --script ssl-poodle -p 443 192.168.30.39 </span><br></pre></td></tr></table></figure></code></pre>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
  </entry>
  <entry>
    <title>3，nmap，NSE脚本格式和编写</title>
    <url>/2020/08/29/3%EF%BC%8Cnmap%EF%BC%8CNSE%E8%84%9A%E6%9C%AC%E6%A0%BC%E5%BC%8F%E5%92%8C%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名诸神之眼NMAP-学习笔记"><a href="#书名诸神之眼NMAP-学习笔记" class="headerlink" title="书名诸神之眼NMAP 学习笔记"></a>书名诸神之眼NMAP 学习笔记</h2><h2 id="编辑器安装"><a href="#编辑器安装" class="headerlink" title="编辑器安装"></a>编辑器安装</h2><ol>
<li><p>halcyon编辑器安装<br>官方<a href="https://halcyon-ide.org/">https://halcyon-ide.org/</a><br>linux安装</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># install dependencies </span><br><span class="line">apt-get install default-jre</span><br><span class="line">apt-get install ant</span><br><span class="line"></span><br><span class="line"># clone from git</span><br><span class="line">cd &#x2F;opt</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;s4n7h0&#x2F;Halcyon.git</span><br><span class="line"></span><br><span class="line"># compile the source </span><br><span class="line">cd Halcyon&#x2F;</span><br><span class="line">ant</span><br><span class="line">java -cp &#x2F;opt&#x2F;Halcyon&#x2F;src&#x2F;lib&#x2F;autocomplete.jar:&#x2F;opt&#x2F;Halcyon&#x2F;src&#x2F;lib&#x2F;rsyntaxtextarea.jar:&#x2F;opt&#x2F;Halcyon&#x2F;dist&#x2F;Halcyon_IDE_v2.0.1.jar halcyon.ide.HalcyonIDE    </span><br></pre></td></tr></table></figure>
<p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605105248226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="加粗样式"></p>
</li>
<li><p>创建<br> <strong>1.添加</strong><br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605105416542.png" alt="在这里插入图片描述"></p>
<p> <strong>2.创建，名字，类型</strong><br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605110411911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <strong>2.2是选择的类型</strong><br> 上面照片1是选择的类型，下面这个是所有的类型<img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605111130915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ol>
<p><strong>3. 结果</strong><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060510551865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="编写简单的NSE脚本"><a href="#编写简单的NSE脚本" class="headerlink" title="编写简单的NSE脚本"></a>编写简单的NSE脚本</h2><ol>
<li><p>首先添加description字段，这里只是一段介绍性的文字，用于说明脚本的目的和用法，没有严格的要求，<br> description字段：这部分内容介绍该NSE的功能，在Nmap中可以使用–script-help选项来阅读其中的内容。<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605110720650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>author字段是脚本作者的名字<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605110836228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>如果没有特殊原因的话，license字段的内容无须修改。     liceNSE = “Same as Nmap–See <a href="https://nmap.org/book/man-legal.html&quot;">https://Nmap.org/book/man-legal.html&quot;</a><br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605110950726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>categories字段：这部分内容给出了该NSE所在的分类<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605111130915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 在<code>/usr/share/nmap/scripts</code>文件里有一个<code>script.db</code>文件<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605111802505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605111048122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>目前一共有4种规则<br> 1、Prerule()规则，这个规则的执行要早于Nmap的扫描，因此这类脚本不会调用Nmap扫描得到的任何结果。执行的顺序是先脚本，后Nmap扫描<br> 2、Hostrule()规则，这个规则是在Nmap已经完成了主机发现之后执行的，根据主机发现的结果来触发该类脚本。执行的顺序是先Nmap主机发现，后脚本<br> 3、Portrule()规则，这个规则与hostrule()规则相类似，不过是在执行了端口扫描或版本侦测时才会触发的脚本，这个规则的执行与端口的状态联系紧密。执行的顺序是先Nmap端口扫描，后脚本<br> 4、Postrule()规则，这个规则是在Nmap已经完成所有的扫描之后才执行，一般用来处理扫描结果。执行的顺序是当所有的扫描都结束以后才会执行脚本<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605113127179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 这个host是主机， port 是端口</p>
</li>
<li><p>rule字段<br>描述脚本执行的规则，也就是确定触发脚本执行的条件。这个规则是一个Lua函数，返回值只有true和false两种。只有当rule字段返回true时，action中的函数才会执行<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605113841870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>action字段：脚本执行的具体内容。当脚本通过rule字段的检查被触发执行时，就会调用action字段定义的函数<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060511274735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>编写一个脚本、<br> 文件名是<code>my-http-detect.nse</code><br> 类型是<code>default</code><br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605121519316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code> 代码是</code></pre>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function( host, port )</span><br><span class="line">	return port.protocol &#x3D;&#x3D; &quot;tcp&quot; and port.number &#x3D;&#x3D; 80 and port.service &#x3D;&#x3D;  &quot;http&quot; and port.state &#x3D;&#x3D; &quot;open&quot;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	return &quot; This is a WebServer&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p> <strong>1.代码解释</strong><br> <code>port.protocol == &quot;tcp&quot; and port.number == 80 and port.service ==  &quot;http&quot; and port.state == &quot;open&quot;</code><br> <code>action = function(host, port)</code><br> <code>return &quot; This is a WebServer&quot;</code><br> 这样当目标服务器上开放的80端口运行着HTTP服务的时候，就可以执行action部分。编写当portrule返回值成功的时候执行的代码</p>
<p> <strong>2.导入到nmap脚本数据库</strong><br> 叫<code>my-http-detect.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br> 复制进去要更新一下nmap脚本的数据库<br> 命令</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
3.使用
导入成功后就可以使用了
命令


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  --script my-http-detect [目标]</span><br></pre></td></tr></table></figure>
结果![在这里插入图片描述](https://img-blog.csdnimg.cn/2020060511572552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h2 id="NSE脚本实例应用：垃圾邮件木马的检测"><a href="#NSE脚本实例应用：垃圾邮件木马的检测" class="headerlink" title="NSE脚本实例应用：垃圾邮件木马的检测"></a>NSE脚本实例应用：垃圾邮件木马的检测</h2><p>下面是目标主机的端口进行检测。查看是否有异常的端口开放了SMTP服务。输出这个异常的端口</p>
<ol>
<li>应为是这个脚本是通过对目标主机端口扫描的结果分析得到的<br> 所以选择的是<code>execution</code><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200605120942245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>代码</li>
</ol>
<pre><code><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">local shortport = <span class="keyword">require</span> <span class="string">&quot;shortport&quot;</span></span><br><span class="line"></span><br><span class="line">description = [[]]</span><br><span class="line"></span><br><span class="line">author = <span class="string">&quot;root&quot;</span></span><br><span class="line"></span><br><span class="line">license = <span class="string">&quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;</span></span><br><span class="line"></span><br><span class="line">categories = &#123;<span class="string">&quot;external&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule = <span class="function"><span class="keyword">function</span>(<span class="params"> host, port </span>)</span></span><br><span class="line"><span class="function">	<span class="title">return</span> <span class="title">port</span>.<span class="title">service</span> == &quot;<span class="title">smtp</span>&quot; <span class="title">and</span></span></span><br><span class="line"><span class="function">			<span class="title">port</span>.<span class="title">number</span> ~= 25      <span class="title">and</span> <span class="title">port</span>.<span class="title">number</span> ~= 465      <span class="title">and</span> <span class="title">port</span>.<span class="title">number</span> ~= 587</span></span><br><span class="line"><span class="function">			<span class="title">and</span> <span class="title">port</span>.<span class="title">protocol</span> == &quot;<span class="title">tcp</span>&quot;     </span></span><br><span class="line"><span class="function">			<span class="title">and</span> <span class="title">port</span>.<span class="title">state</span> == &quot;<span class="title">open</span>&quot;</span></span><br><span class="line"><span class="function"><span class="title">end</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">action</span> = <span class="title">function</span>(<span class="params">host, port</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">return</span> </span></span><br><span class="line"><span class="function">  &quot;<span class="title">Mail</span> <span class="title">server</span> <span class="title">on</span> <span class="title">unusual</span> <span class="title">port</span>: <span class="title">possible</span> <span class="title">malware</span>&quot;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">end</span></span></span><br></pre></td></tr></table></figure>
代码介绍
1.`port.service == &quot;smtp&quot;`
要对这个检测得到的port表中的所有内容进行检测，首先查看是否有SMTP服务
2.`port.number ~= 25`  和  `port.number ~= 465`  和  ` port.number ~= 587`  `port.protocol == &quot;tcp&quot;`  `port.state == &quot;open&quot;`
测该服务是否在不正常的端口上运行，SMTP正常应该运行在25、465或者587端口上,结果如果不符合上面的规则，就输出
`return &quot;Mail server on unusual port: possible malware&quot;`

叫代码文件移动到`/usr/share/nmap/scripts/`文件下面
复制进去要更新一下nmap脚本的数据库
命令


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>

**开始扫描**
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap  --script 脚本名 [目标]</span><br></pre></td></tr></table></figure>
扫描结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200605124301568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>4，nmap，Lua语言</title>
    <url>/2020/08/29/4%EF%BC%8Cnmap%EF%BC%8CLua%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名诸神之眼NMAP-学习笔记"><a href="#书名诸神之眼NMAP-学习笔记" class="headerlink" title="书名诸神之眼NMAP 学习笔记"></a>书名诸神之眼NMAP 学习笔记</h2><p><strong>20年-06月-08 日20:12</strong></p>
<p>输出<code>print(&quot;Hello&quot;)</code><br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060810243891.png" alt="在这里插入图片描述"></p>
<h2 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h2><p>Lua认为false和nil为假，true和非nil为真。<br>和其他语言有点不同<br>为真才会执行then里面的，如果是假会跳过then里面的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (真)</span><br><span class="line">then</span><br><span class="line">   print(&quot;会执行这个&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>


<ol>
<li><p>true咧<br>代码</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">if  true</span><br><span class="line">then</span><br><span class="line">   print(&quot;Hello&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p> 执行结果<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608103555206.png" alt="在这里插入图片描述"></p>
</li>
<li><p>false咧<br> 代码</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">if false</span><br><span class="line">then</span><br><span class="line">   print(&quot;Hello&quot;)</span><br><span class="line">end</span><br><span class="line">   print(&quot;Hello1111&quot;)</span><br></pre></td></tr></table></figure>
<p> 结果<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608103859650.png" alt="在这里插入图片描述"><br> 实咧<br> 代码</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">a&#x3D;&quot;abc&quot;</span><br><span class="line">if (a&#x3D;&#x3D;&quot;abc&quot;)</span><br><span class="line">then</span><br><span class="line">   print(&quot;a变量是abc&quot;)</span><br><span class="line">end</span><br><span class="line">   print(&quot;##########&quot;)</span><br></pre></td></tr></table></figure>
<p> 结果<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608104550349.png" alt="在这里插入图片描述"></p>
<h2 id="1-2-if-…else"><a href="#1-2-if-…else" class="headerlink" title="1.2 if …else"></a>1.2 if …else</h2><p>咧<br>代码</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">a&#x3D;&quot;qwe&quot;</span><br><span class="line">if (a&#x3D;&#x3D;&quot;abc&quot;)</span><br><span class="line">then</span><br><span class="line">   print(&quot;a变量是abc&quot;)</span><br><span class="line">elseif(a&#x3D;&#x3D;&quot;qwe&quot;)</span><br><span class="line">then</span><br><span class="line">    print(&quot;a变量啥qwe&quot;)</span><br><span class="line">end </span><br><span class="line">    print(&quot;##########&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608105633650.png" alt="在这里插入图片描述"></p>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>为真就循环do里面的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(真)</span><br><span class="line">do</span><br><span class="line">   print(&quot;a&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>咧<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">a&#x3D;1</span><br><span class="line">while(a&lt;10)</span><br><span class="line">do</span><br><span class="line">   print(a)</span><br><span class="line">   a&#x3D;a+1</span><br><span class="line">end</span><br><span class="line">  print(&quot;结束&quot;)</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608110705730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h2><p>与while不同的是，for语句可以直接控制循环重复执行的次数<br>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">for a&#x3D;1,10</span><br><span class="line">do </span><br><span class="line">   print(a)</span><br><span class="line">end </span><br><span class="line">  print(&quot;结束&quot;)</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608111523863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h2><p>repeat…until结构也是Lua的一种循环结构，这个结构不断地重复执行循环，直到指定的条件为真时为止<br>如果一直为假就一直执行print(“a”)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repeat</span><br><span class="line">    print(&quot;a&quot;)</span><br><span class="line">until(假)</span><br></pre></td></tr></table></figure>

<p>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">a&#x3D;1</span><br><span class="line">repeat</span><br><span class="line">   print(a)</span><br><span class="line">   a&#x3D;a+1</span><br><span class="line">until(a&gt;10)</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/202006081124425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="break循环语句"><a href="#break循环语句" class="headerlink" title="break循环语句"></a>break循环语句</h2><p>break语句是一种循环控制语句，可以实现退出当前循环或语句</p>
<h2 id="Lua数据类型"><a href="#Lua数据类型" class="headerlink" title="Lua数据类型"></a>Lua数据类型</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608113003706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>咧<br>函数type是用来查看类型的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">a&#x3D;1</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure>
<p>结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608113444663.png" alt="在这里插入图片描述"></p>
<h2 id="string库"><a href="#string库" class="headerlink" title="string库"></a>string库</h2><ol>
<li><p>全部转为大写字母<br>string.upper()<br>upper函数将字符串中的字符全部转为大写字母<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608113843110.png" alt="在这里插入图片描述"></p>
</li>
<li><p>全部转为小写字母</p>
<p> string.lower()<br> lower函数将字符串中的字符全部转为小写字母<br> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608114117988.png" alt="在这里插入图片描述"></p>
<ol start="3">
<li>替换</li>
</ol>
<p>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string.gsub(&quot;adadadadadad&quot;,&quot;a&quot;,&quot;4&quot;,2)</span><br></pre></td></tr></table></figure>
<p>adadadadadad里面的a替换2个替换成4<br>结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200608115307678.png" alt="在这里插入图片描述"></p>
</li>
</ol>
<ol start="4">
<li>查询字符在的位置<br>函数find()<br>咧<br>代码</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(string.find(&quot;abcdefg&quot;,&quot;f&quot;,2))</span><br></pre></td></tr></table></figure>
上面的意思就是在abcdefg字符里面的第2的位置查看是否有f这个字符
如果没有找到就返回nil
结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200608193639731.png)</code></pre>
<ol start="5">
<li>数字转换成字符<br> string.char(xxx,xxx,xxx,xxx)<br> char函数将整型数字转成字符并连接，<br> 就是对应的ASCII码值<br> 咧<br> 代码</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(string.char(65,66,67,68))</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200608194406939.png)</code></pre>
<ol start="6">
<li>字符转换成数字<br> string.byte(xx,xx,xx)<br> byte函数转换字符为整数值<br> 他好像只能转换一个字符<br> 可以指定字符<br> 1.咧</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(string.byte(&quot;B&quot;))</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200608194901292.png)</code></pre>
<ol start="7">
<li>计算字符串的长度<br> string.len()<br> len函数计算字符串长度<br> 代码</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;&quot;ABCD&quot;</span><br><span class="line">print(string.len(a))</span><br></pre></td></tr></table></figure>

![在这里插入图片描述](https://img-blog.csdnimg.cn/20200608195617278.png)</code></pre>
<ol start="8">
<li>重复显示字符串和连接<br> string.rep()<br> <strong>1.rep函数返回字符串string的n个拷贝</strong><br> 咧</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(string.rep(&quot;ACBD:&quot;,3))</span><br></pre></td></tr></table></figure>
结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200608200257254.png)</code></pre>
<p>上面的意思就是重复3次</p>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>5，nmap，2.Lua语言，nmap NSE中的API，host table(表)</title>
    <url>/2020/08/29/5%EF%BC%8Cnmap%EF%BC%8C2.Lua%E8%AF%AD%E8%A8%80%EF%BC%8Cnmap%20NSE%E4%B8%AD%E7%9A%84API%EF%BC%8Chost%20table(%E8%A1%A8)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名诸神之眼NMAP-学习笔记"><a href="#书名诸神之眼NMAP-学习笔记" class="headerlink" title="书名诸神之眼NMAP 学习笔记"></a>书名诸神之眼NMAP 学习笔记</h2><h2 id="20年6月9日8-17"><a href="#20年6月9日8-17" class="headerlink" title="20年6月9日8:17"></a>20年6月9日8:17</h2><h2 id="Lua文件I-O操作"><a href="#Lua文件I-O操作" class="headerlink" title="Lua文件I/O操作"></a>Lua文件I/O操作</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060908040667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>打开文件，读一行和关闭文件<br>代码<br>函数<code>io.open(&quot;文件名&quot;,&quot;打开方式&quot;)</code>打开文件<br>函数<code>read()</code>读取文件第一行<br>函数close()关闭文件还可以格式<code>io.close(a)</code></p>
<p>咧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;lua</span><br><span class="line">--读的方式打开文件</span><br><span class="line">a&#x3D;io.open(&quot;a.txt&quot;,&quot;r&quot;)</span><br><span class="line"></span><br><span class="line">--输出文件第一行</span><br><span class="line">print(a:read())</span><br><span class="line"></span><br><span class="line">--关闭打开的文件</span><br><span class="line">a:close()</span><br></pre></td></tr></table></figure>
<p>a.txt文件内容<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200609083453963.png" alt="在这里插入图片描述"><br>执行结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020060908351388.png" alt="在这里插入图片描述"></p>
<h2 id="Lua协同程序"><a href="#Lua协同程序" class="headerlink" title="Lua协同程序"></a>Lua协同程序</h2><ol>
<li>协同程序和线程类似拥有独立的堆栈、独立的局部变量、独立的指令指针，同时又与其他协同程序共享全局变量和其他大部分东西</li>
<li>线程与协同程序的主要区别在于，一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作运行。在任一指定时刻只有一个协同程序在运行，并且这个正在运行的协同程序只有在明确要求挂起的时候才会被挂起。协同程序有点类似同步的多线程，在等待同一个线程锁的几个线程有点类似协同。</li>
</ol>
<h3 id="Lua协同程序语法"><a href="#Lua协同程序语法" class="headerlink" title="Lua协同程序语法"></a>Lua协同程序语法</h3><ol>
<li>coroutine.create()<br> 这个方法用来创建一个coroutine，将要进行多线程的函数作为参数，返回值是一个coroutine。</li>
<li>coroutine.resume()<br> 这个方法用来完成coroutine重启操作，与create配合使用。</li>
<li>coroutine.yield()<br> 这个方法用来实现coroutine的挂起操作，将coroutine设置为挂起状态。</li>
<li>coroutine.status()<br> 这个方法用来查看coroutine的状态。这里coroutine的状态一共有dead、suspend、running三种。</li>
<li>coroutine.wrap()<br> 这个方法创建一个coroutine，用于返回一个函数，一旦调用这个函数，就进入协同程序，与create功能相同。</li>
<li>coroutine.running()这个方法返回正在运行的coroutine。一个coroutine就是一个线程，当使用running时，返回的是当前正在运行的协同程序的线程号。</li>
</ol>
<h2 id="nmap-NSE中的API"><a href="#nmap-NSE中的API" class="headerlink" title="nmap NSE中的API"></a>nmap NSE中的API</h2><p>Nmap中的引擎会向脚本传递两个类型的参数<strong>host</strong>和<strong>port</strong><br>host 的table(表)存放这目标主机信息<br>port 的table(表)存放这目标端口信息<br>他和port和host详细程度取决，扫描过程中选项选项的设定，例如，如果在扫描时没有指定要对主机的操作系统进行扫描的话，那么host.os的内容就是空的</p>
<h2 id="1host-table"><a href="#1host-table" class="headerlink" title="1host table"></a>1host table</h2><ol>
<li><p>host.os字段<br>里面存放这目标主机的类型<br>这个字段中包括了一个我们常见的操作系统信息的数组，涉及操作系统的供应商、所属系列、具体型号、设备类型、CPE等。如果某个字段没有被定义的话，这个字段可以为nil</p>
<p> 咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;kali&quot;</span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function( host, port )</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	 return host.os</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p> <strong>上面的代码的意思是return true(真)执行return host.os返回host.os</strong><br> 叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p> 结果<br> 用上面的脚本</p>
<p> 命令</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.43.244 -O -p 3389</span><br></pre></td></tr></table></figure>
<p> <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/202006091024414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>host.ip字段<br>里面包含了的IP地址<br>咧<br>代码<br>我保存到了名为<code>wode.nse</code></p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line">	</span><br><span class="line">	description &#x3D; [[]]</span><br><span class="line">	</span><br><span class="line">	author &#x3D; &quot;root&quot;</span><br><span class="line">	</span><br><span class="line">	license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line">	</span><br><span class="line">	categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	portrule &#x3D; function(host, port)</span><br><span class="line">		return true</span><br><span class="line">	end</span><br><span class="line">	</span><br><span class="line">	action &#x3D; function(host, port)</span><br><span class="line">	</span><br><span class="line">		return host.ip</span><br><span class="line">	</span><br><span class="line">	end</span><br><span class="line">	&#96;&#96;&#96;	</span><br><span class="line">	叫&#96;wode.nse&#96;移动到&#96;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;&#96;文件下面</span><br><span class="line">复制进去要更新一下nmap脚本的数据库</span><br><span class="line">命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
nmap --script-updatedb
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果</span><br><span class="line">用上面的脚本命令</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
sudo nmap --script wode www.baidu.com -p 80
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;2020061007414782.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</span><br><span class="line">3. host.name字段</span><br><span class="line">里面包含了目标的反向DNS域名</span><br><span class="line"> 咧</span><br><span class="line"> 代码</span><br><span class="line"> 我保存到了名为&#96;wode.nse&#96;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
local shortport = require &quot;shortport&quot;

description = [[]]

author = &quot;root&quot;

license = &quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;

categories = &#123;&quot;default&quot;&#125;





portrule = function(host, port)
    return true
end

action = function(host, port)

    return host.name

end
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	叫&#96;wode.nse&#96;移动到&#96;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;&#96;文件下面</span><br><span class="line">复制进去要更新一下nmap脚本的数据库</span><br><span class="line">命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
nmap --script-updatedb
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	结果</span><br><span class="line">	不知道怎么回事好像不能检查到</span><br><span class="line">4. host.targetname字段</span><br><span class="line">里面包含了主机的在命令中的命令</span><br><span class="line">5. host.directly_connected字段‘</span><br><span class="line"></span><br><span class="line">	字段是一个布尔值true和false，表示目标计算机是否与我们同在一个子网</span><br><span class="line">咧</span><br><span class="line">代码</span><br><span class="line">我保存到了名为&#96;wode.nse&#96;</span><br></pre></td></tr></table></figure>
local shortport = require &quot;shortport&quot;

description = [[]]

author = &quot;root&quot;

license = &quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;

categories = &#123;&quot;default&quot;&#125;





portrule = function(host, port)
    return true
end

action = function(host, port)

    return host.directly_connected

end
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	叫&#96;wode.nse&#96;移动到&#96;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;&#96;文件下面</span><br><span class="line">复制进去要更新一下nmap脚本的数据库</span><br><span class="line">命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
nmap --script-updatedb
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">结果1是true,这个我扫描的是我内网</span><br><span class="line">命令</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
sudo nmap --script wode 192.168.43.221 -p 80
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">	![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200610084715462.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</span><br><span class="line">结果2是false我扫描的是百度，不是在我内网的</span><br><span class="line">命令</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
sudo nmap --script wode www.baidu.com -p 80
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200610085123555.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</span><br><span class="line">6. host.mac_addr字段</span><br><span class="line">这个字段是目标的MAC地址，注意：要是扫描的不是同一个网段的话可能就没有效果，应为扫描外网是通用IP寻址的</span><br><span class="line">咧</span><br><span class="line">代码</span><br><span class="line">我保存到了名为&#96;wode.nse&#96;</span><br></pre></td></tr></table></figure>
local shortport = require &quot;shortport&quot;

description = [[]]

author = &quot;root&quot;

license = &quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;

categories = &#123;&quot;default&quot;&#125;





portrule = function(host, port)
    return true
end

action = function(host, port)

    return host.mac_addr

end
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	叫&#96;wode.nse&#96;移动到&#96;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;&#96;文件下面</span><br><span class="line">复制进去要更新一下nmap脚本的数据库</span><br><span class="line">命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
nmap --script-updatedb
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果</span><br><span class="line">命令</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
sudo nmap --script wode 192.168.43.221 -p 80
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200610094109507.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)	</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">7.	host.mac_addr_src</span><br><span class="line">	</span><br><span class="line">	段中是使用的计算机的MAC地址</span><br><span class="line">咧</span><br><span class="line">代码</span><br><span class="line">我保存到了名为&#96;wode.nse&#96;</span><br></pre></td></tr></table></figure>
local shortport = require &quot;shortport&quot;

description = [[]]

author = &quot;root&quot;

license = &quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;

categories = &#123;&quot;default&quot;&#125;





portrule = function(host, port)
    return true
end

action = function(host, port)

    return host.mac_addr_src

end
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	叫&#96;wode.nse&#96;移动到&#96;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;&#96;文件下面</span><br><span class="line">复制进去要更新一下nmap脚本的数据库</span><br><span class="line">命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
nmap --script-updatedb
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果</span><br><span class="line">命令</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
sudo nmap --script wode 192.168.43.1
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200610094657504.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</span><br><span class="line">8. host.interface_mtu</span><br><span class="line">字段中是网络中的MTU值</span><br><span class="line">咧</span><br><span class="line">代码</span><br><span class="line">我保存到了名为&#96;wode.nse&#96;</span><br></pre></td></tr></table></figure>
local shortport = require &quot;shortport&quot;

description = [[]]

author = &quot;root&quot;

license = &quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;

categories = &#123;&quot;default&quot;&#125;





portrule = function(host, port)
    return true
end

action = function(host, port)

    return host.interface_mtu

end
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	叫&#96;wode.nse&#96;移动到&#96;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;&#96;文件下面</span><br><span class="line">复制进去要更新一下nmap脚本的数据库</span><br><span class="line">命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
nmap --script-updatedb
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果</span><br><span class="line">命令</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
sudo nmap --script wode 192.168.43.1
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200610095011857.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</span><br><span class="line">9. host.bin_ip字段</span><br><span class="line">	 字段中的内容是使用4字节字符串表示的IPv4目标地址以及使用16字节字符串来表示IPv6目标地址</span><br><span class="line">	 咧</span><br><span class="line">	 代码</span><br><span class="line">	 我保存到了名为&#96;wode.nse&#96;</span><br></pre></td></tr></table></figure>
local shortport = require &quot;shortport&quot;

description = [[]]

author = &quot;root&quot;

license = &quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;

categories = &#123;&quot;default&quot;&#125;





portrule = function(host, port)
    return true
end

action = function(host, port)

    return host.bin_ip

end
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	叫&#96;wode.nse&#96;移动到&#96;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;&#96;文件下面</span><br><span class="line">复制进去要更新一下nmap脚本的数据库</span><br><span class="line">命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
nmap --script-updatedb
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果</span><br><span class="line">命令</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
sudo nmap --script wode 192.168.31.22 -p 3389
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200610150149660.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</span><br><span class="line">10. host.bin_ip_src</span><br><span class="line">	</span><br><span class="line">	里面字段中包含两个地址，一个是使用IPv4格式表示所使用的计算机地址，另一个是用IPv6格式表示所使用的计算机地址</span><br><span class="line">	咧</span><br><span class="line">	代码</span><br><span class="line">	我保存到了名为&#96;wode.nse&#96;</span><br></pre></td></tr></table></figure>
local shortport = require &quot;shortport&quot;

description = [[]]

author = &quot;root&quot;

license = &quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;

categories = &#123;&quot;default&quot;&#125;





portrule = function(host, port)
    return true
end

action = function(host, port)

    return host.bin_ip_src
end
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	叫&#96;wode.nse&#96;移动到&#96;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;&#96;文件下面</span><br><span class="line">复制进去要更新一下nmap脚本的数据库</span><br><span class="line">命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
nmap --script-updatedb
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	结果</span><br><span class="line">	![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200610150817708.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</span><br><span class="line">11. host.times</span><br><span class="line">	里面字段中的内容是目标的时序数据</span><br><span class="line">	咧</span><br><span class="line">	代码</span><br><span class="line">	我保存到了名为&#96;wode.nse&#96;</span><br></pre></td></tr></table></figure>
local shortport = require &quot;shortport&quot;

description = [[]]

author = &quot;root&quot;

license = &quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;

categories = &#123;&quot;default&quot;&#125;





portrule = function(host, port)
    return true
end

action = function(host, port)

    return host.times

end
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	叫&#96;wode.nse&#96;移动到&#96;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;&#96;文件下面</span><br><span class="line">复制进去要更新一下nmap脚本的数据库</span><br><span class="line">命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
nmap --script-updatedb
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	结果![在这里插入图片描述](https:&#x2F;&#x2F;img-blog.csdnimg.cn&#x2F;20200610151030145.png?x-oss-process&#x3D;image&#x2F;watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</span><br><span class="line"></span><br><span class="line">12. host.traceroute</span><br><span class="line">	字段中的数据只有指定--traceroute才会出现，</span><br><span class="line">	&#96;--traceroute&#96;参数是跟踪路由用于检测您的计算机数据包从路由器到ISP的路由到互联网直至其特定目的地</span><br><span class="line">咧</span><br><span class="line">代码</span><br><span class="line">我保存到了名为&#96;wode.nse&#96;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
local shortport = require &quot;shortport&quot;

description = [[]]

author = &quot;root&quot;

license = &quot;Same as Nmap--See http://nmap.org/book/man-legal.html&quot;

categories = &#123;&quot;default&quot;&#125;





portrule = function(host, port)
    return true
end

action = function(host, port)

    return host.traceroute

end
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	叫&#96;wode.nse&#96;移动到&#96;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&#x2F;&#96;文件下面</span><br><span class="line">复制进去要更新一下nmap脚本的数据库</span><br><span class="line">命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
nmap --script-updatedb
```
结果
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200610152910882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>6 ,nmap NSE中的API port table(表)，NSE库文件编写</title>
    <url>/2020/08/29/6%20,nmap%20NSE%E4%B8%AD%E7%9A%84API%20port%20table(%E8%A1%A8)%EF%BC%8CNSE%E5%BA%93%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="书名诸神之眼NMAP-学习笔记"><a href="#书名诸神之眼NMAP-学习笔记" class="headerlink" title="书名诸神之眼NMAP 学习笔记"></a>书名诸神之眼NMAP 学习笔记</h2><h2 id="20年6月11日7-23"><a href="#20年6月11日7-23" class="headerlink" title="20年6月11日7:23"></a>20年6月11日7:23</h2><h2 id="port-table-表"><a href="#port-table-表" class="headerlink" title="port table(表)"></a>port table(表)</h2><ol>
<li>port.number字段<br> 这个字段标识了目标端口<br> 咧<br> 代码<br> 我保存到了名为<code>wode.nse</code></li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return port.number</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
叫`wode.nse`移动到`/usr/share/nmap/scripts/`文件下面</code></pre>
<p>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
结果
命令


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200611073135242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="2">
<li>port.protocol<br> 这个字段是识别TCP和UDP的端口的类型<br> 咧<br> 代码<br> 我保存到了名为<code>wode.nse</code></li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return port.protocol</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
叫`wode.nse`移动到`/usr/share/nmap/scripts/`文件下面</code></pre>
<p>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
结果
命令


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200611073532149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="3">
<li><p>port.service字段<br> 字段是目标的端口的运行的服务<br> 咧<br> 代码<br> 我保存到了名为<code>wode.nse</code></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return port.service</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p> 叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
<p> 结果<br> 命令</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21 </span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200611074024662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="4">
<li>port.version字段<br> 字段中保存了通过服务扫描发现的版本信息，包括name、name_confidence、product、version、extrainfo、hostname、ostype、devicetype、service_tunnel、service_ftp以及cpe_code等字段。注意这个字段需要使用参数-sV<br> 咧<br> 代码</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return port.version</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
叫`wode.nse`移动到`/usr/share/nmap/scripts/`文件下面</code></pre>
<p>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
结果
命令


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21 -sV</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200611074343321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="5">
<li>port.state字段<br> 存放端口的状态<br> 咧<br> 代码</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return port.state</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
叫`wode.nse`移动到`/usr/share/nmap/scripts/`文件下面</code></pre>
<p>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
结果
命令


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200611074652210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h2 id="NSE中的异常处理"><a href="#NSE中的异常处理" class="headerlink" title="NSE中的异常处理"></a>NSE中的异常处理</h2><p>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local nmap &#x3D; require &quot;nmap&quot;</span><br><span class="line">local comm &#x3D; require &quot;comm&quot;</span><br><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default,discovery,safe&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; shortport.port_or_service(79, &quot;ﬁnger&quot;)</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line">	try &#x3D; nmap.new_try()</span><br><span class="line">	return try(comm.exchange(host, port, &quot;\r\n&quot;, </span><br><span class="line">	&#123;lines&#x3D;100, timeout&#x3D;5000&#125;))</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>上面代码说明<br>nmap提供了nmap库，叫nmap<br> 监控异常的代码放置在Nmap.new_try()函数的括号中即可，这个函数的第一个返回值就表明了状态。如果返回值为false或者nil，第二个返回值就是一个错误相关的字符串<br> 如果comm.exchange正常执行的话，就可以返回原本的值，如果出现异常，就可以返回这个异常</p>
<h2 id="NSE中的注册表"><a href="#NSE中的注册表" class="headerlink" title="NSE中的注册表"></a>NSE中的注册表</h2><p>NSE注册表也是一个Lua<br> tablc 类型的数据文件，他主要用来保持住一次扫描中各个脚本之间共享的变量，这个注册表保持住一个名为nmap.refistry的变量中。举个例子，在使用脚本对目标的口令进行爆破的时候，就可以使用这个注册表把已经破解的用户密码保持起来，已提供其他脚本的使用。例如，爆破得到目标的用户admin，密码123456,就会执行一个插入操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">table.iNSErt(Nmap.registry.credentials.http, </span><br><span class="line">&#123; username &#x3D; admin, password &#x3D;123456 &#125; )</span><br></pre></td></tr></table></figure>

<h2 id="NSE中的库文件"><a href="#NSE中的库文件" class="headerlink" title="NSE中的库文件"></a>NSE中的库文件</h2><ol>
<li>库文件的位置</li>
</ol>
<pre><code>库文件在`/usr/share/nmap/nselib`

![在这里插入图片描述](https://img-blog.csdnimg.cn/2020061110090232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)


halcyon编辑器会自动按照nmap的路径进行找到库</code></pre>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200611100529723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这些库文件涵盖了几乎当前所有的流行协议、常见的字符串处理操作，甚至包含了用来实现对用户名和密码进行破解的brute库文件。当在编写NSE脚本的时候，你可能会考虑到代码重构的问题。最好的解决方法还是将核心的代码创建为NSE的库文件。事实上，NSE库文件的创建是非常简单的。NSE中的库文件大都是使用Lua语言编写的，但是如果你使用C或者C++语言也是可行的</p>
<h3 id="NSE库文件编写和调用"><a href="#NSE库文件编写和调用" class="headerlink" title="NSE库文件编写和调用"></a>NSE库文件编写和调用</h3><ol>
<li><p>NSE库文件编写<br> 咧<br> 代码</p>
<p> 保存的文件名<code>a.lua</code>保持到<code>/usr/share/nmap/nselib</code>目录里面</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function b(port)         </span><br><span class="line">        return string.format(&quot;The port &#39;%s&#39; is open&quot;,port)      </span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p> 代码说明<br> function 定义函数的，定义了一个a函数传参是port<br> string.format函数是一个类似printf的格式化字符串我看到了一个写的很详细的在这个地址<a href="https://blog.csdn.net/hello_crayon/article/details/50667927">https://blog.csdn.net/hello_crayon/article/details/50667927</a></p>
</li>
<li><p>调用<br> NSE脚本调用<br> 编写一个NSE脚本<br> 代码<br> 保持的文件名为<code>wode.nse</code></p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line">local a &#x3D; require &quot;a&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">        return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">        return b(port.number)</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
代码调用说明
**上面的代码`local a = require &quot;a&quot;`就是调用上面编写的a.lua的脚本文件
上面的代码 `return b(port.number)`代码就是b就是a.lua的脚本文件里面的函数，port.number传参给a.lua的脚本文件文件里面的port**

 叫`wode.nse`移动到`/usr/share/nmap/scripts/`文件下面</code></pre>
<p>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
结果
命令


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21</span><br></pre></td></tr></table></figure>
  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200611112628243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h2 id="QQ2737977997"><a href="#QQ2737977997" class="headerlink" title="QQ2737977997"></a>QQ2737977997</h2>]]></content>
      <categories>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>7, nmap,NSE库文件</title>
    <url>/2020/08/29/7,%20nmap,NSE%E5%BA%93%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常见的NSE库文件"><a href="#常见的NSE库文件" class="headerlink" title="常见的NSE库文件"></a>常见的NSE库文件</h2><h3 id="1-shortport库"><a href="#1-shortport库" class="headerlink" title="1.shortport库"></a><strong>1.shortport库</strong></h3><p>它会收集最常见的端口规则的信息</p>
<p><strong>例如：扫描目标上是否存在SSH服务，就可以使用如下代码</strong><br>代码</p>
<p>保存的文件名<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;,&quot;safe&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; shortport.port_or_service(22, &quot;ssh&quot;, &#123;&quot;tcp&quot;,&quot;udp&quot;&#125;,&#123;&quot;open&quot; &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line"></span><br><span class="line">	return &quot;kai&quot;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>代码说明</p>
<ol>
<li>代码 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br></pre></td></tr></table></figure>
 导入shortport库</li>
<li>代码 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shortport.port_or_service(22, &quot;ssh&quot;, &#123;&quot;tcp&quot;,&quot;udp&quot;&#125;,&#123;&quot;open&quot; &#125;)</span><br></pre></td></tr></table></figure>
 代码：shortport库中提供了<code>shortport.port_or_service(22, &quot;ssh&quot;, &#123;&quot;tcp&quot;,&quot;udp&quot;&#125;,&#123;&quot;open&quot; &#125;)</code>方法，其中4个参数分别介绍如下</li>
</ol>
<p><strong>第一个：一个或者多个端口号。<br>第二个：一个或者多个服务的名称。<br>第三个：一个或者多个匹配的协议，默认值为“tcp”。<br>第四个：一个或者多个匹配的状态,默认值为{“open”, “open|filtered”}。</strong><br>     3. 应为 <code>shortport.port_or_service(22, &quot;ssh&quot;, &#123;&quot;tcp&quot;,&quot;udp&quot;&#125;,&#123;&quot;open&quot; &#125;)</code>有返回值就不需要return语句</p>
<pre><code>**执行**</code></pre>
<p>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
结果</code></pre>
<p>命令</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21</span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200613081512799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h3 id="2-comm库"><a href="#2-comm库" class="headerlink" title="2.comm库"></a><strong>2.comm库</strong></h3><p>功能和目标主机的端口建立通信，需要库文件comm这个库的功能是进行数据交换<br><strong>例如：这里使用comm.exchange方法向目标计算机发送一个“dummy”字符串，代码如下</strong><br>代码<br>保存的文件名<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line"></span><br><span class="line">local comm &#x3D; require &quot;comm&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;,&quot;safe&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line">	local status, result &#x3D; comm.exchange(host, port, &quot;dummy&quot;, &#123;lines&#x3D;1&#125;)</span><br><span class="line">	</span><br><span class="line">	if status</span><br><span class="line">	then</span><br><span class="line">		return result</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>代码说明</p>
<ol>
<li>代码 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local comm &#x3D; require &quot;comm&quot;</span><br></pre></td></tr></table></figure>
 调用comm库</li>
<li>代码 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local status, result &#x3D; comm.exchange(host, port, &quot;dummy&quot;, &#123;lines&#x3D;1&#125;)</span><br></pre></td></tr></table></figure>
 comm.exchange(host, port, “dummy”, {lines=1})中包含4个参数，分别介绍如下</li>
</ol>
<p><strong>第一个：连接的目标主机。<br>第二个：目标主机的指定端口。<br>第三个：开始要发送的数据,上面发送到是”dummy”字段<br>第四个：指定了传递中的一些细节，不过是个可选项。常见的值有如下两个</strong><br>    1.bytes：读取的最小字节数。<br>     2.lines：读取的最小行数。</p>
<pre><code> **local 创建一个局部变量status和result**
变量status 如果返回comm.exchange(host, port, &quot;dummy&quot;, &#123;lines=1&#125;)返回的是数据status就为true，如果不是status就为false，
变量result是保存Nmap在接收之后会将其保存在result中</code></pre>
<ol start="4">
<li>代码</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if status</span><br><span class="line">then</span><br><span class="line">	return result</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
变量status 如果返回comm.exchange(host, port, &quot;dummy&quot;, &#123;lines=1&#125;)返回的是数据status就为true，如果不是status就为false，返回的是数据就输出result变量</code></pre>
<p><strong>执行</strong><br>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
结果</code></pre>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.21</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200613092250913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3-http库"><a href="#3-http库" class="headerlink" title="3.http库"></a><strong>3.http库</strong></h3><p>现在Nmap已经成为一个强大有力的Web漏洞扫描工具<br>这个库中包含http.head()函数是head方法、http.get()函数是get方法和http.post()函数是post方法<br>利用http库文件来开发一个简单但很容易使用的视频监控漏洞的检测脚本</p>
<p>这里以Trendnet的一款TV-IP110W产品为例。这款产品在使用时，只需输入<code>http://IP地址+/anony/mjpg.cgi</code>无须任何认证即可完成访问<br><strong>1.脚本设计思路</strong><br>首先，对网络进行扫描<br>根据扫描的结果，查看是否有可以无须认证就可以访问的<code>http://IP地址+/anony/mjpg.cgi</code><br>最后，如果找到了这种页面就将其输出。<br><strong>2.实现设计的脚本</strong><br>代码<br>保存的文件名<code>wode.nse</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line">local http &#x3D; require &quot;http&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;cxploit&quot;,&quot;vuln&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; shortport.http</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line">	local uri &#x3D; &quot;&#x2F;anony&#x2F;mjpg.cgi&quot; </span><br><span class="line">	local resp &#x3D; http.head(host, port, uri)</span><br><span class="line">	if resp.status &#x3D;&#x3D; 200</span><br><span class="line">	then</span><br><span class="line">		return string.format(&quot;Trendnet TV-IP110W video feed is unprotected:http:&#x2F;&#x2F;%s&#x2F;anony&#x2F;mjpg.cgi&quot;, host.ip)</span><br><span class="line">	end</span><br><span class="line">	</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>代码说明</p>
<ol>
<li><p>代码</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local http &#x3D; require &quot;http&quot;</span><br></pre></td></tr></table></figure>
<p> 导入http库</p>
</li>
<li><p>代码</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">portrule &#x3D; shortport.http</span><br></pre></td></tr></table></figure>
如果目标端口上运行着HTTP服务，返回值为true，否则为false。</code></pre>
<ol start="3">
<li>代码</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local uri &#x3D; &quot;&#x2F;anony&#x2F;mjpg.cgi&quot; </span><br></pre></td></tr></table></figure>
定义一个局部变量uri</code></pre>
<ol start="4">
<li>代码</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local resp &#x3D; http.head(host, port, uri)</span><br></pre></td></tr></table></figure>
http库里面的head方法，这个方法会向目标地址发送一个请求，然后返回目标发回的数据包的一些信息，
方法使用如下4个参数
**第一个：目标主机。
第二个：目标端口。
第三个：试图访问的页面地址。
第四个：[可选项]，一个表**
执行后返回值为一个表，这个表中包含了很多信息，例如数据包的status、header、cookies等，其中status给出HTTP的状态值，如果页面访问正常的话，这个值就为200 ；如果在访问过程中出现了问题，这个值就是nil。</code></pre>
<ol start="5">
<li>代码 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if resp.status &#x3D;&#x3D; 200</span><br><span class="line">then</span><br><span class="line">	return string.format(&quot;Trendnet TV-IP110W video feed is unprotected:http:&#x2F;&#x2F;%s&#x2F;anony&#x2F;mjpg.cgi&quot;, host.ip)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
 resp变量里面的status 查看查看是不是200也就是也找个网页<br> 有只执行</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return string.format(&quot;Trendnet TV-IP110W video feed is unprotected:http:&#x2F;&#x2F;%s&#x2F;anony&#x2F;mjpg.cgi&quot;, host.ip)</span><br></pre></td></tr></table></figure></code></pre>
<p><strong>执行</strong><br>这个我只是在web服务区上添加了/anony/mjpg.cgi文件<br>叫<code>wode.nse</code>移动到<code>/usr/share/nmap/scripts/</code>文件下面<br>复制进去要更新一下nmap脚本的数据库<br>命令</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script-updatedb</span><br></pre></td></tr></table></figure>
结果</code></pre>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script wode 192.168.31.20 -p 80</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200614074535533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="4-stdnse"><a href="#4-stdnse" class="headerlink" title="4.stdnse"></a>4.stdnse</h3><ol>
<li>stdnse.get_script_args函数<br> 当在Nmap执行过程中，利用stdnse.get_script_args函数就通过选项<code>--script-args</code>来传递参数<br> 咧<br> 代码</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line">local stdnse &#x3D; require &quot;stdnse&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line"></span><br><span class="line">categories &#x3D; &#123;&quot;cxploit&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">portrule &#x3D; function(host, port)</span><br><span class="line">	return true</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line">	local threads &#x3D; stdnse.get_script_args(&quot;a&quot;)</span><br><span class="line">	</span><br><span class="line">	return threads</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
代码说明


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local threads &#x3D; stdnse.get_script_args(&quot;a&quot;)</span><br></pre></td></tr></table></figure>
定义一个 threads局部变量接受nmap 参数`--script-args a=xxx`接收的信息
结果,然后给return返回打印出来
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200614080404243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h3 id="5-target库"><a href="#5-target库" class="headerlink" title="5.target库"></a>5.target库</h3><p>实用程序功能可将新发现的目标添加到Nmap扫描队列 </p>
]]></content>
      <categories>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>8.nmap ,NSE中的数据文件</title>
    <url>/2020/08/29/8.nmap%20,NSE%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="NSE中的数据文件"><a href="#NSE中的数据文件" class="headerlink" title="NSE中的数据文件"></a>NSE中的数据文件</h2><p>NSE中的数据文件文件在<code>/usr/share/nmap/nselib/data</code>文件里面</p>
<h3 id="nmap使用库的优先级"><a href="#nmap使用库的优先级" class="headerlink" title="nmap使用库的优先级"></a>nmap使用库的优先级</h3><p><strong>优先级1</strong>：选项–datadir所指定的目录。<br><strong>优先级2</strong>：环境变量中指定的位置。<br><strong>优先级3</strong>：安装目录。<br><strong>优先级4</strong>：在编译时定义的目录。</p>
<h3 id="暴力穷举时所使用的用户名和密码列表数据文件"><a href="#暴力穷举时所使用的用户名和密码列表数据文件" class="headerlink" title="暴力穷举时所使用的用户名和密码列表数据文件"></a>暴力穷举时所使用的用户名和密码列表数据文件</h3><p>用户文件在<code>/usr/share/nmap/nselib/data/usernames.lst</code><br>密码文件在<code>/usr/share/nmap/nselib/data/passwords.lst</code></p>
<h3 id="Web应用审计数据文件"><a href="#Web应用审计数据文件" class="headerlink" title="Web应用审计数据文件"></a>Web应用审计数据文件</h3><ol>
<li>http-fingerprints.lua数据文件<br> 文件在<code>/usr/share/nmap/nselib/data/http-fingerprints.lua</code><br> 是使用<code>http-enum</code>(web枚举)用的参数脚本的时候调用的就是这个<br>  <code>http-fingerprints.lua</code>数据文件<br>  查看结果<br>  命令</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script http-enum  192.168.31.20 -p 80</span><br></pre></td></tr></table></figure>

![在这里插入图片描述](https://img-blog.csdnimg.cn/20200615153128197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)
 另外，如果希望在http-enum脚本执行的时候使用其他的数据文件，也可以在执行的时候使用参数--script-args http-enum.fingerprintfile来指定。例如要使用./myfingerprints.txt就可以执行如下命令。    


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script http-enum --script-args http-enum.ﬁngerprintﬁle&#x3D;.&#x2F;myﬁngerprints. txt -p80 目标地址</span><br></pre></td></tr></table></figure></code></pre>
<ol start="2">
<li>http-sql-errors.lst数据文件<br> 文件在<code>/usr/share/nmap/nselib/data/http-sql-errors.lst</code><br> 使用脚本参数<code>http-sql-injection</code>会调用<code>http-sql-errors.lst</code>数据文件<br> 用来完成对应用是否能够抵御SQL注入进行检测。这个文件中一共包含了339个字符串<br> 咧<br> 命令</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script http-sql-injection 192.168.31.20  -p 80 </span><br></pre></td></tr></table></figure>
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200615153213522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<p>同样也可以使用参数http-sql-injection.errorstrings来改变这个脚本执行时所使用的数据文件。    </p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap --script http-sql-injection --script-args http-sql-injection.errorstrings&#x3D;&#x2F;home&#x2F;errors.txt 目标地址</span><br></pre></td></tr></table></figure></code></pre>
<ol start="3">
<li>http-devframework-fingerprints.lua数据文件<br> 文件在<code>/usr/share/nmap/nselib/data/http-devframework-fingerprints.lua</code><br> 这个数据文件由Lua table所构成，被脚本<code>http-devframework</code>所调用，目的是检测目标Web应用的开发语言，例如ASP、PHP等。<br> 这个table中的每一项都包含了如下字段。<br> <strong>Name：开发环境的描述性名称。<br> RapidDetect：在检测过程开始执行的回调函数。<br> consumingDetect：一个在爬虫页面执行的回调函数</strong><br> 咧<br> 命令</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script http-devframework  192.168.31.20  -p 80</span><br></pre></td></tr></table></figure>
结果没有扫描出来
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200615154735338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<ol start="4">
<li>http-folders.txt数据文件<br> 文件在<code>/usr/share/nmap/nselib/data/http-folders.txt</code><br> 这个数据文件中包含了956个HTTP中常见的目录名，被脚本http-iis-webdav-vuln所调用，用来检测IIS 5.1/6.0类型服务器上的漏洞<br> 咧<br> 命令</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script http-iis-webdav-vuln  192.168.31.20  -p 80</span><br></pre></td></tr></table></figure>
下面的结果目标是不存在漏洞的
![在这里插入图片描述](https://img-blog.csdnimg.cn/20200615160326189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<p>如果不想使用这个数据文件，也可以使用参数–script-args folderdb来指定其他的数据文件，<br>例如使用/pentest/fuzzers/folders.txt作为这个目录</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script http-iis-webdav-vuln   --script-args folderdb&#x3D;&#x2F;pentest&#x2F;fuzzers&#x2F;folders.txt 目标地址</span><br></pre></td></tr></table></figure></code></pre>
<ol start="5">
<li>vhosts-default.lst数据文件<br> 文件在<code>/usr/share/nmap/nselib/data/vhosts-default.lst</code><br> 脚本<code>http-vhosts</code>就是用这个数据文件来判断目标服务器到底是一个虚拟机还是一个真正的Web服务器<br> 咧<br> 命令</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script http-vhosts  192.168.31.20  -p 80</span><br></pre></td></tr></table></figure>
结果是
![在这里插入图片描述](https://img-blog.csdnimg.cn/2020061516231119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70)</code></pre>
<h3 id="DBMS-数据库管理系统-审核数据文件"><a href="#DBMS-数据库管理系统-审核数据文件" class="headerlink" title="DBMS(数据库管理系统)-审核数据文件"></a>DBMS(数据库管理系统)-审核数据文件</h3><ol>
<li>mysql-cis.audit数据文件<br> 文件在<code>/usr/share/nmap/nselib/data/mysql-cis.audit</code><br> 这个文件位于Nmap的安装目录中，主要根据CIS MySQL v1.0.2 benchmark来检测MySQL数据库的配置安全性。NSE中有一个<code>mysql-audit</code>脚本就是使用了这个文件，</li>
<li>oracle-default-accounts.lst数据文件<br> 文件在<code>/usr/share/nmap/nselib/data/oracle-default-accounts.lst</code><br> 这个文件中包含了687个Oracle数据库中用来验证的用户名。这个文件被<code>oracle-brute</code>和<code>oracle-brute-stealth</code>两个脚本所调用</li>
<li>oracle-sids数据文件<br>文件在<code>/usr/share/nmap/nselib/data/oracle-sids</code><br>文件oracle-sids包含了700个常见的Oracle数据库实例名，这个文件被脚本<code>oracle-sid-brute</code>调用</li>
</ol>
<h2 id="密码审计脚本的开发"><a href="#密码审计脚本的开发" class="headerlink" title="密码审计脚本的开发"></a>密码审计脚本的开发</h2><h3 id="使用NSE库进行工作"><a href="#使用NSE库进行工作" class="headerlink" title="使用NSE库进行工作"></a>使用NSE库进行工作</h3><p>看不懂</p>
<h2 id="漏洞审计与渗透脚本的编写"><a href="#漏洞审计与渗透脚本的编写" class="headerlink" title="漏洞审计与渗透脚本的编写"></a>漏洞审计与渗透脚本的编写</h2><h3 id="1-Nmap中的漏洞扫描功能"><a href="#1-Nmap中的漏洞扫描功能" class="headerlink" title="1.Nmap中的漏洞扫描功能"></a>1.Nmap中的漏洞扫描功能</h3><p>平时可能会用到一些专业的漏洞扫描器，例如Nessus或者OpenVas等，nmap也有很多的漏洞扫描功能<br>使用NSE来完成漏洞扫描的优势包括以下几点</p>
<ol>
<li>可以使用Nmap API来完成对扫描过程中收集信息的处理</li>
<li>NSE脚本可以在执行过程中和其他的脚本共享获得的信息</li>
<li>中提供了大量网络协议库的组件。</li>
<li>NSE中提供了漏洞库文件，利用漏洞库文件可以创建一份优秀的漏洞报告。</li>
<li>NSE中提供了强大的并发机制和错误处理机制</li>
</ol>
<p>咧对目标一个整个分类进行扫描<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200616164725430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap -sV --version-all -p- --script [类型的名字] 192.168.31.20 </span><br></pre></td></tr></table></figure>
<p> <strong><code>--script</code>后面类型名字是对这个类型的所有脚本进行扫描</strong><br> <strong><code>-p-</code>是对有效的端口进行扫描</strong><br><strong><code>--version-all</code>相当于–version-intensity 9 扫描强度</strong><br>也可以所有扫描的内容给列出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap -sV --script vuln --script-args vulns.showall 192.168.31.20</span><br></pre></td></tr></table></figure>

<p>结果<br><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/202006161720392.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="2-NSE中的exploit脚本"><a href="#2-NSE中的exploit脚本" class="headerlink" title="2. NSE中的exploit脚本"></a>2. NSE中的exploit脚本</h3><p>全部exploit类型的脚本<a href="https://nmap.org/nsedoc/categories/exploit.html">https://nmap.org/nsedoc/categories/exploit.html</a><br>的exploit分类包含32个脚本，这些脚本都是用来对某些应用和服务进行渗透的</p>
<ol>
<li><code>http-csrf</code>：专门用来检测目标网站是否存在跨站点请求伪造（csrf）漏洞。<br> 命令</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap --script http-csrf 192.168.31.20   -p 80</span><br></pre></td></tr></table></figure></code></pre>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200616165534814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2. <code>http-stored-xss</code>：专门用来检测目标网站是否存在存储型跨站（xss）漏洞。</p>
<ol start="3">
<li><code>http-adobe-coldfusion-apsa1301</code>：专门用来检测目标网站是否存在adobe-coldfusion-apsa1301漏洞</li>
<li><code>smb-check-vulns</code>：专门用来检测目标为Windows操作系统上的一个ms08_067漏洞，这个漏洞曾经广泛存在于Windows XP和Windows 2003中</li>
<li>获得目标的一些有用信息之后，例如目标服务器的类型为IIS，可以在整个脚本中查找相关的漏洞。针对这个IIS，可以查找到一个iis-short-name-brute（ IIS短文件名暴力枚举）漏洞渗透脚本，这个脚本的名字为http-iis-short-name-brute.NSE。这是一个微软IIS漏洞，攻击者可以利用一个包含“~”的get请求，从而导致目标服务器上的文件和文件夹泄漏<br>受到影响的服务器软件版本有如下这些。<br>IIS 1.0，Windows NT 3.51IIS 2.0，Windows NT 4.0IIS 3.0，Windows NT 4.0 Service Pack 2IIS 4.0，Windows NT 4.0 Option PackIIS 5.0，Windows 2000IIS 5.1，Windows XP Professional和Windows XP Media Center EditionIIS 6.0，Windows Server 2003和Windows XP Professional x64 Edition IIS 7.0，Windows Server 2008和Windows VistaaIIS 7.5，Windows 7（远程开启了错误或者没有web.config配置文件的情况下）IIS 7.5，Windows 2008（经典托管管道模式）执行这个脚本的命令格式如下。<br> 命令 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p80 --script http-iis-short-name-brute  [目标]</span><br></pre></td></tr></table></figure>
<h3 id="2-RealVNC的渗透脚本"><a href="#2-RealVNC的渗透脚本" class="headerlink" title="2.RealVNC的渗透脚本"></a>2.RealVNC的渗透脚本</h3>是一个远程操控软件<br>但是在这款软件的很多过时版本中都存在着一些漏洞，尤其是realvnc-auth-bypass（RealVNC认证绕过）漏洞，可能导致攻击者直接绕过认证机制</li>
</ol>
<p>咧<br>RealVNC漏洞扫描脚本<br>代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line">local nmap &#x3D; require &quot;nmap&quot;</span><br><span class="line">local vulns &#x3D; require &quot;vulns&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">description &#x3D; [[]]</span><br><span class="line"></span><br><span class="line">author &#x3D; &quot;root&quot;</span><br><span class="line"></span><br><span class="line">license &#x3D; &quot;Same as Nmap--See http:&#x2F;&#x2F;nmap.org&#x2F;book&#x2F;man-legal.html&quot;</span><br><span class="line">categories &#x3D; &#123;&quot;default&quot;,&quot;safe&quot;&#125;</span><br><span class="line"></span><br><span class="line">portrule &#x3D; shortport.port_or_service(5900, &quot;vnc&quot;)</span><br><span class="line"></span><br><span class="line">action &#x3D; function(host, port)</span><br><span class="line">	</span><br><span class="line">	local socket &#x3D; nmap.new_socket()      </span><br><span class="line">	local result      </span><br><span class="line">	local status &#x3D; true      </span><br><span class="line">	socket:connect(host, port)      </span><br><span class="line">	status, result &#x3D; socket:receive_lines(1)      </span><br><span class="line">	</span><br><span class="line">	if (not status) </span><br><span class="line">	then      </span><br><span class="line">		socket:close()      </span><br><span class="line">	return      </span><br><span class="line">	end</span><br><span class="line">	      </span><br><span class="line">	socket:send(&quot;RFB 003.008\n&quot;)      </span><br><span class="line">	status, result &#x3D; socket:receive_bytes(2)     </span><br><span class="line">	</span><br><span class="line">	if (not status or result ~&#x3D; &quot;\001\002&quot;) </span><br><span class="line">	then      </span><br><span class="line">		socket:close()    </span><br><span class="line">	end     </span><br><span class="line">	</span><br><span class="line">	socket:send(&quot;\001&quot;)      </span><br><span class="line">	status, result &#x3D; socket:receive_bytes(4)      </span><br><span class="line">	</span><br><span class="line">	if (not status or result ~&#x3D; &quot;\000\000\000\000&quot;) </span><br><span class="line">	then      </span><br><span class="line">		socket:close()      </span><br><span class="line">		return      </span><br><span class="line">	end      </span><br><span class="line">	</span><br><span class="line">	socket:close()      </span><br><span class="line">	</span><br><span class="line">	return &quot;Vulnerable&quot;      </span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>代码说明</p>
<ol>
<li><p>导入需要的库</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local shortport &#x3D; require &quot;shortport&quot;</span><br><span class="line">local nmap &#x3D; require &quot;nmap&quot;</span><br><span class="line">local vulns &#x3D; require &quot;vulns&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>这个脚本的执行规则是发现端口为5900、服务为VNC的目标后执行</p>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">portrule &#x3D; shortport.port_or_service(5900, &quot;vnc&quot;)</span><br></pre></td></tr></table></figure></code></pre>
<ol start="3">
<li>首先创建一个socket函数，与目标服务进行通信，然后向目标发送探针数据包，根据返回的回应包来检测目标上运行的RealVNC是否存在漏洞<br> <code>action</code>里面的</li>
</ol>
<h3 id="3-Windows系统漏洞的检测"><a href="#3-Windows系统漏洞的检测" class="headerlink" title="3.Windows系统漏洞的检测"></a>3.Windows系统漏洞的检测</h3><p>使用系统漏洞检查可能会对目标系统造成伤害，nmap自己开启了谨慎的操作，如果想去掉，可以添加<code>--script-args unsafe</code><br>在扫描的时候，这种脚本可能会引起目标系统的崩溃<br>咧<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- -sV --script vuln --script-args unsafe 192.168.31.20</span><br></pre></td></tr></table></figure>
<p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020061619445357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODYwODc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="对heartbleed漏洞进行渗透"><a href="#对heartbleed漏洞进行渗透" class="headerlink" title="对heartbleed漏洞进行渗透"></a>对heartbleed漏洞进行渗透</h3><p>看不懂</p>
<h3 id="NSE的并发执行"><a href="#NSE的并发执行" class="headerlink" title="NSE的并发执行"></a>NSE的并发执行</h3>]]></content>
      <categories>
        <category>nmap</category>
      </categories>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
</search>
